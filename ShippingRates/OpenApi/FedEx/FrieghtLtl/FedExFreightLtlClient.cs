//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace ShippingRates.OpenApi.FedEx.FrieghtLtl
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(string baseUrl, System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Rate Freight LTL
        /// </summary>
        /// <remarks>
        /// This endpoint provides the ability to retrieve rate quotes and optionall transit information. The rate is calculated based on the origin and destination of the shipment. Additional information such as carrier code, service type, or service option can be used to filter the results. Applicable operating company is FedEx Freight.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RatcResponseVO> Freight_RateQuoteAsync(FullSchema body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return Freight_RateQuoteAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Rate Freight LTL
        /// </summary>
        /// <remarks>
        /// This endpoint provides the ability to retrieve rate quotes and optionall transit information. The rate is calculated based on the origin and destination of the shipment. Additional information such as carrier code, service type, or service option can be used to filter the results. Applicable operating company is FedEx Freight.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RatcResponseVO> Freight_RateQuoteAsync(FullSchema body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rate/v1/freight/rates/quotes"
                    urlBuilder_.Append("rate/v1/freight/rates/quotes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RatcResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Ship Freight LTL
        /// </summary>
        /// <remarks>
        /// This endpoint helps you to create a Freight LTL Shipment request with the required Freight LTL Shipment information, and to retrieve information for an already in process shipment. It also allows you to confirm and validate your shipment.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SHPCResponseVO> Freight_ShipmentAsync(FullSchemaFreightShipment body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return Freight_ShipmentAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ship Freight LTL
        /// </summary>
        /// <remarks>
        /// This endpoint helps you to create a Freight LTL Shipment request with the required Freight LTL Shipment information, and to retrieve information for an already in process shipment. It also allows you to confirm and validate your shipment.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SHPCResponseVO> Freight_ShipmentAsync(FullSchemaFreightShipment body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "ship/v1/freight/shipments"
                    urlBuilder_.Append("ship/v1/freight/shipments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SHPCResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check Freight LTL Pickup Availability
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to check the availability of an Freight LTL pickup service. The pickup availability depends on two factors, the cut off time and the access time.&lt;br/&gt;&lt;br/&gt;**Cut off time** - The latest time allowed for a pickup to be scheduled. The time is local to the pickup postal code.&lt;br/&gt;&lt;br/&gt;**Access time** - The time between the pickup ready time (when the package is ready to be picked) and the time when the driver is ready to pick up the package.&lt;br/&gt;&lt;br/&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PudcResponseVO_PickupAvailaibility> Check_Freight_Pickup_AvailabilityAsync(FullSchemaFreightPickupAvailability body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return Check_Freight_Pickup_AvailabilityAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check Freight LTL Pickup Availability
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to check the availability of an Freight LTL pickup service. The pickup availability depends on two factors, the cut off time and the access time.&lt;br/&gt;&lt;br/&gt;**Cut off time** - The latest time allowed for a pickup to be scheduled. The time is local to the pickup postal code.&lt;br/&gt;&lt;br/&gt;**Access time** - The time between the pickup ready time (when the package is ready to be picked) and the time when the driver is ready to pick up the package.&lt;br/&gt;&lt;br/&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PudcResponseVO_PickupAvailaibility> Check_Freight_Pickup_AvailabilityAsync(FullSchemaFreightPickupAvailability body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "pickup/v1/freight/pickups/availabilities"
                    urlBuilder_.Append("pickup/v1/freight/pickups/availabilities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PudcResponseVO_PickupAvailaibility>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Freight LTL Pickup
        /// </summary>
        /// <remarks>
        /// This endpoint helps you to create a freight pickup request for a package to be picked up.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PudcResponseVO> Create_Freight_PickupAsync(FullSchemaCreatePickup body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return Create_Freight_PickupAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Freight LTL Pickup
        /// </summary>
        /// <remarks>
        /// This endpoint helps you to create a freight pickup request for a package to be picked up.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PudcResponseVO> Create_Freight_PickupAsync(FullSchemaCreatePickup body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "pickup/v1/freight/pickups/"
                    urlBuilder_.Append("pickup/v1/freight/pickups/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PudcResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Freight LTL Pickup
        /// </summary>
        /// <remarks>
        /// Use this endpoint to cancel the already scheduled freight pickup request. Note a failure notification will be sent if you attempt to cancel a pickup after the FedEx courier has been dispatched to the pickup location.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PudcResponseVO_CancelPickup> Cancel_Freight_PickupAsync(FullSchemaCancelFreightPickup body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return Cancel_Freight_PickupAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Freight LTL Pickup
        /// </summary>
        /// <remarks>
        /// Use this endpoint to cancel the already scheduled freight pickup request. Note a failure notification will be sent if you attempt to cancel a pickup after the FedEx courier has been dispatched to the pickup location.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PudcResponseVO_CancelPickup> Cancel_Freight_PickupAsync(FullSchemaCancelFreightPickup body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "pickup/v1/freight/pickups/cancel/"
                    urlBuilder_.Append("pickup/v1/freight/pickups/cancel/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PudcResponseVO_CancelPickup>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The request elements for requesting a freight rate quote.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullSchema
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LTLRootAccountNumber AccountNumber { get; set; } = new LTLRootAccountNumber();

        [Newtonsoft.Json.JsonProperty("rateRequestControlParameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LTLRateRequestControlParameters RateRequestControlParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("freightRequestedShipment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LTLRequestedShipment FreightRequestedShipment { get; set; } = new LTLRequestedShipment();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the Account number details.&lt;br&gt;&lt;i&gt;Note:&lt;ul&gt;&lt;li&gt;In case if this is shipping account number, do use the account number used for creating Auth Token.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLRootAccountNumber
    {
        /// <summary>
        /// This is the account number. Maximum Length is 9. &lt;br&gt;Example: XXX456XXX
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are various parameters you can provide for filtering and sorting  capability in the response, such as transit time and commit data, rate sort order etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLRateRequestControlParameters
    {
        /// <summary>
        /// Indicate if the transit time and commit data are to be returned in the reply. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnTransitTimes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReturnTransitTimes { get; set; }

        /// <summary>
        /// Specify the services to be requested if the rate data is not available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("servicesNeededOnRateFailure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ServicesNeededOnRateFailure { get; set; }

        /// <summary>
        /// Specify service options whose combinations are to be considered when replying with available services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variableOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LTLRateRequestControlParametersVariableOptions VariableOptions { get; set; }

        /// <summary>
        /// This is a sort order you can specify to control the order of the response data: &lt;br&gt; Example: &lt;ul&gt;&lt;li&gt;SERVICENAMETRADITIONAL - data in order of highest to lowest service (Default)&lt;/li&gt;&lt;li&gt;COMMITASCENDING - data in order of ascending delivery committment&lt;/li&gt;&lt;li&gt;COMMITDESCENDING - data in order of descending delivery committment.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateSortOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LTLRateRequestControlParametersRateSortOrder RateSortOrder { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This contains shipment data describing the shipment for which a  freight rate quote (or rate-shopping comparison) is desired.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLRequestedShipment
    {
        /// <summary>
        /// The descriptive data for the physical location from which the shipment originates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RateParty Shipper { get; set; } = new RateParty();

        /// <summary>
        /// Specifies the recipient details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RateParty Recipient { get; set; } = new RateParty();

        /// <summary>
        /// The FedEx service type for the shipment. The results will be filtered by the serviceType value indicated.  If no serviceType is indicated then all the applicable services and corresponding rates will be returned.Allowed service types are FEDEX_FREIGHT_PRIORITY and FEDEX_FREIGHT_ECONOMY.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceType { get; set; }

        /// <summary>
        /// Indicates the currency the caller requests to have used in all returned monetary values (when a choice is possible).  Used in conjunction with the rateRequestType data element.&lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt; Click here to see Currency Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreferredCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("shippingChargesPayment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LTLPayment ShippingChargesPayment { get; set; }

        /// <summary>
        /// Indicate the type of rates to be returned. The account specific rates are returned by default if the account number is specified in the request.&lt;br&gt;Following are values:&lt;ul&gt;&lt;li&gt;LIST - Returns FedEx published list rates in addition to account-specific rates (if applicable).&lt;/li&gt;&lt;li&gt;INCENTIVE - This is one-time discount for incentivising the customer. For more information, contact your FedEx representative.&lt;/li&gt;&lt;li&gt;ACCOUNT - Returns account specific rates (Default).&lt;/li&gt;&lt;/ul&gt;Examples: ["INCENTIVE", "LIST"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateRequestType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<RateRequestType> RateRequestType { get; set; }

        /// <summary>
        /// This is the Shipment date. Required for future ship date rates.Default is current date if not indicated or date is in the past.&lt;br&gt;The format is YYYY-MM-DD&lt;br&gt; Example: 2019-09-06
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateStamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipDateStamp { get; set; }

        /// <summary>
        /// One or more package-attribute descriptions, each of which describes an individual package, a group of identical packages, or (for the total-piece-total-weight case) common characteristics of all packages in the shipment.&lt;br&gt;At least one array instance containing the weight for at least one package is required for freight shipments.&lt;br&gt;Single piece requests will have one RequestedPackageLineItem.&lt;br&gt;Multiple piece requests will have multiple RequestedPackageLineItems.&lt;br&gt; Maximum occurrences is 99.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedPackageLineItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LTLRequestedPackageLineItem> RequestedPackageLineItems { get; set; } = new System.Collections.ObjectModel.Collection<LTLRequestedPackageLineItem>();

        /// <summary>
        /// Conditional&lt;br&gt;Indicates the total number of packages in the shipment. &lt;br&gt;The Maximum number of packages in a rate request is 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPackageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalPackageCount { get; set; }

        /// <summary>
        /// Conditional. Identifies the total weight of the shipment being conveyed to FedEx.
        /// <br/>  This is only applicable to International shipments and should be used on the first package of a multiple piece shipment. This value contains 1 explicit decimal position.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("freightShipmentDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LTLFreightShipmentDetail FreightShipmentDetail { get; set; } = new LTLFreightShipmentDetail();

        [Newtonsoft.Json.JsonProperty("freightShipmentSpecialServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LTLShipmentSpecialServicesRequested FreightShipmentSpecialServices { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the shipper address details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateParty
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address Address { get; set; } = new Address();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are details about shipment payment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLPayment
    {
        [Newtonsoft.Json.JsonProperty("payor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LTLPayor Payor { get; set; }

        /// <summary>
        /// Indicate the payment Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LTLPaymentPaymentType PaymentType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is payer Information responsible for paying for the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLPayor
    {
        /// <summary>
        /// These are payer details such as address, account and contacts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responsibleParty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party ResponsibleParty { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the Account number details.&lt;br&gt;&lt;i&gt;Note:&lt;ul&gt;&lt;li&gt;If the paymentType is Sender, then the account number is optional in shippingChargesPayment.&lt;/li&gt;&lt;li&gt;In case if this is shipping account number, do use the account number used for creating Auth Token.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountNumber
    {
        /// <summary>
        /// Specify value of the account number. Maximum length is 9.&lt;br&gt; Example: XXXXX6789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLRequestedPackageLineItem
    {
        /// <summary>
        /// This is a physical packaging type used for the package. &lt;br&gt;Example: TUBE, CARTON, CONTAINER. etc.&lt;br&gt;&lt;a onclick='loadDocReference("subpackagetypes")'&gt;Click here to see Sub-Packaging Types&lt;/a&gt;&lt;br&gt;For more information on physical packaging or packaging regulatory requirements, visit FedEx.com or contact your FedEx representative.&lt;br&gt;Note: Sub packaging CAGE is not applicable for LTL Freight shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subPackagingType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubPackagingType { get; set; }

        /// <summary>
        /// Indicate the grouped package count. These are number of identical package(s) each with one or more commodities. &lt;br&gt; Example: 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupPackageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GroupPackageCount { get; set; }

        /// <summary>
        /// Specifies the details of contents of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentRecord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentRecord> ContentRecord { get; set; }

        /// <summary>
        /// This is the Declared Value represents FedEx Maximum liability in connection with a shipment of that Package, including but not limited to, any loss, damage, delay, misdelivery, any failure to provide information, or misdelivery of information relating to the Shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money DeclaredValue { get; set; }

        /// <summary>
        /// Indicate the total weight of the requested package line items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Specifies associated freight line items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associatedFreightLineItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AssociatedFreightLineItemDetail> AssociatedFreightLineItems { get; set; } = new System.Collections.ObjectModel.Collection<AssociatedFreightLineItemDetail>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Data applicable to shipments using FEDEX_FREIGHT_ECONOMY and FEDEX_FREIGHT_PRIORITY services
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLFreightShipmentDetail
    {
        /// <summary>
        /// Indicates the role of the party submitting the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LTLFreightShipmentDetailRole Role { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumber AccountNumber { get; set; }

        /// <summary>
        /// This is the declared value per unit. Declared Value represents FedEx Maximum liability in connection with a shipment of that Package, including but not limited to, any loss, damage, delay, misdelivery, any failure to provide information, or misdelivery of information relating to the Shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declaredValueUnits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeclaredValueUnits { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentDimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions ShipmentDimensions { get; set; }

        /// <summary>
        /// Details of the commodities in the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineItem", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FreightShipmentLineItem> LineItem { get; set; } = new System.Collections.ObjectModel.Collection<FreightShipmentLineItem>();

        /// <summary>
        /// This is only used for anonymous rate requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientDiscountPercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClientDiscountPercent { get; set; }

        [Newtonsoft.Json.JsonProperty("fedExFreightBillingContactAndAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress FedExFreightBillingContactAndAddress { get; set; }

        /// <summary>
        /// Alternate unique identifier assigned to this a line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aliasID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AliasID { get; set; }

        /// <summary>
        /// Specifies the hazardous materials offeror.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardousMaterialsOfferor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HazardousMaterialsOfferor { get; set; }

        /// <summary>
        /// 
        /// <br/>This is the declared value per unit. Declared Value represents FedEx Maximum liability in connection with a shipment of that Package, including but not limited to, any loss, damage, delay, misdelivery, any failure to provide information, or misdelivery of information relating to the Shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declaredValuePerUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money DeclaredValuePerUnit { get; set; }

        /// <summary>
        /// Total number of individual handling units in the entire shipment (for unit pricing). May not be negative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalHandlingUnits", Required = Newtonsoft.Json.Required.Always)]
        public int TotalHandlingUnits { get; set; }

        [Newtonsoft.Json.JsonProperty("alternateBillingParty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LTLRateParty AlternateBillingParty { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify alternate billing party details. &lt;br&gt;Note: These details are required when paymentType selected as THIRD_PARTY.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLRateParty
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address Address { get; set; } = new Address();

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LTLFreightAccountNumber AccountNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the Account number details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLFreightAccountNumber
    {
        /// <summary>
        /// This is the account number. Maximum Length is 9. &lt;br&gt;Example: XXX456XXX
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate special services for which the rate data is being requested. Special Services are available at the shipment level for some or all service types.&lt;br&gt;Valid values are:&lt;ul&gt;&lt;li&gt;FREIGHT_GUARANTEE&lt;/li&gt;&lt;li&gt;COD&lt;/li&gt;&lt;li&gt;BROKER_SELECT_OPTION&lt;/li&gt;&lt;li&gt;DANGEROUS_GOODS&lt;/li&gt;&lt;li&gt;FOOD&lt;/li&gt;&lt;li&gt;POISON&lt;/li&gt;&lt;li&gt; INSIDE_DELIVERY&lt;/li&gt;&lt;li&gt;INSIDE_PICKUP&lt;/li&gt;&lt;li&gt;LIFTGATE_PICKUP&lt;/li&gt;&lt;li&gt;LIFTGATE_DELIVERY&lt;/li&gt;&lt;li&gt;LIMITED_ACCESS_PICKUP&lt;/li&gt;&lt;li&gt; LIMITED_ACCESS_DELIVERY&lt;/li&gt;&lt;li&gt;DO_NOT_STACK_PALLETS&lt;/li&gt;&lt;li&gt; DO_NOT_BREAK_DOWN_PALLETS&lt;/li&gt;&lt;li&gt;CALL_BEFORE_DELIVERY&lt;/li&gt;&lt;li&gt; TOP_LOAD &lt;/li&gt;&lt;li&gt;OVER_LENGTH&lt;/li&gt;&lt;li&gt; EXTREME_LENGTH&lt;/li&gt;&lt;li&gt; PROTECTION_FROM_FREEZING&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;a onclick='loadDocReference("shipmentlevelspecialservicetypes")'&gt;Click here to see Shipment level Special Service Types&lt;/a&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLShipmentSpecialServicesRequested
    {
        [Newtonsoft.Json.JsonProperty("freightGuaranteeDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FreightGuaranteeDetail FreightGuaranteeDetail { get; set; }

        /// <summary>
        /// Indicate special services for which the rate data is being requested. Special Services are available at the shipment level for some or all service types.&lt;br&gt;Example: FREIGHT_GUARANTEE &lt;br&gt;&lt;a onclick='loadDocReference("freightlevelspecialservicetypes")'&gt;Click here to see Freight Level Special Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialServiceTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SpecialServiceTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("freightDirectDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FreightDirectDetail FreightDirectDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a wrapper class for outputVO.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RatcResponseVO
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RateOutputVO Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response elements when a rate quote is requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateOutputVO
    {
        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt;Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        /// <summary>
        /// This object will hold the rate and shipment data returned for a request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateReplyDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LTLRateReplyDetail> RateReplyDetails { get; set; }

        /// <summary>
        /// The date on which the rate is quoted.&lt;br&gt; Example: 2019-09-18
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quoteDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteDate { get; set; }

        /// <summary>
        /// Specifies the encoded form of the rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encoded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Encoded { get; set; }

        /// <summary>
        /// The cxs alert code, alert type, and alert message obtained when a rate quote is requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of rate data by single service. If a service was specified in the request, there will be a single entry in this array; if service was omitted in the request, there will be a separate entry in this array for each service being compared.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLRateReplyDetail
    {
        /// <summary>
        /// Service code associated with this particular rate. &lt;br&gt; For Ground this will be a direct copy of the service specified in the request.  For domestic Express, the service may have been bumped, so it may not match the value specified on the request.  For International Express the service may be bumped and not mapped.Allowed values are FEDEX_FREIGHT_PRIORITY and FEDEX_FREIGHT_ECONOMY 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceType { get; set; }

        /// <summary>
        /// The translated service name associated with service type given. &lt;br&gt; Example: FedEx Freight Economy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Packaging type associated with this particular rate.  For Ground will always be YOUR_PACKAGING.  For domestic Express, the packaging may have been bumped so it may not match the value specified on the request.  For International Express the packaging may be bumped and not mapped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackagingType { get; set; }

        /// <summary>
        /// Messages concerning the ability to provide an accurate delivery commitment on an International commit quote.  These could be messages providing information about why a commitment could not be returned or a successful message such as REQUEST_COMPLETED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerMessage> CustomerMessages { get; set; }

        [Newtonsoft.Json.JsonProperty("ratedShipmentDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RatedShipmentDetail RatedShipmentDetails { get; set; }

        /// <summary>
        /// Indicates the Freight origin and destination city center information and total distance between origin and destination city centers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightTransitLocationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FreightTransitLocationDetail> FreightTransitLocationDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("operationalDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationalDetail OperationalDetail { get; set; }

        /// <summary>
        /// Indicates the signature Option for this service. &lt;br&gt; Example: SERVICE_DEFAULT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureOptionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignatureOptionType { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceDescription ServiceDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("brokerDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BrokerDetail BrokerDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommitDetail Commit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This the Customer Message returned in the reply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerMessage
    {
        /// <summary>
        /// This is a message code.&lt;br&gt; Example:SERVICE.TYPE.INTERNATIONAL.MESSAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// This is a message description.&lt;br&gt; Example: Rate does not include duties &amp; taxes, clearance entry fees or other import fees. The payor of duties/taxes/fees will be responsible for any applicable Clearance Entry Fees
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This object provides the shipment and package rating data in a rate request reply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RatedShipmentDetail
    {
        /// <summary>
        /// Indicates the rate type used for this rate data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RatedShipmentDetailRateType RateType { get; set; }

        /// <summary>
        /// Indicates the weight type used for the rate.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedWeightMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RatedShipmentDetailRatedWeightMethod RatedWeightMethod { get; set; }

        /// <summary>
        /// This is the total amount of the duties and taxes plus the total ancillary fees and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDutiesTaxesAndFees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDutiesTaxesAndFees { get; set; }

        /// <summary>
        /// This is the total discount.&lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDiscounts { get; set; }

        /// <summary>
        /// The total of shipment/package Duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDutiesAndTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("variableHandlingCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariableHandlingCharges VariableHandlingCharges { get; set; }

        /// <summary>
        /// These are the estimation and duty  charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edtCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EdtCharge> EdtCharges { get; set; }

        /// <summary>
        /// Indicates the shipment-level fees and taxes that are not based on transportation charges or commodity-level estimated duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAncillaryFeesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalAncillaryFeesAndTaxes { get; set; }

        /// <summary>
        /// These are the package-level data for this rate type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedPackages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RatedPackageDetail> RatedPackages { get; set; }

        /// <summary>
        /// This shipment's totalNetFedExChargeList, which is totalNetFreight plus totalSurcharges (not including totalTaxes).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetFedExCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetFedExCharge { get; set; }

        /// <summary>
        /// Indicates the unique identifier for a specific rate quotation.&lt;br&gt; Example: XX1123XX
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quoteNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteNumber { get; set; }

        /// <summary>
        /// This is data for a single leg of a shipment's total/summary rates, as calculated per a specific rate type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentLegRateDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> ShipmentLegRateDetails { get; set; }

        /// <summary>
        /// This identifies the manner in which the chargeRate was applied, for Freight.&lt;br&gt; Valid values are: &lt;ul&gt;&lt;li&gt;CWT - Charge rate applies per weight.&lt;/li&gt;&lt;li&gt;FLAT - Charge rate is a flat-rate amount.&lt;/li&gt;&lt;li&gt;MINIMUM&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightChargeBasis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RatedShipmentDetailFreightChargeBasis FreightChargeBasis { get; set; }

        [Newtonsoft.Json.JsonProperty("totalVariableHandlingCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariableHandlingCharges TotalVariableHandlingCharges { get; set; }

        /// <summary>
        /// This is total value added tax charges (VAT).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalVatCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalVatCharge { get; set; }

        /// <summary>
        /// This is the total amount of the shipment-level fees and taxes that are not based on transportation charges of commodity-level estimated duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ancillaryFeesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AncillaryFeesAndTaxes> AncillaryFeesAndTaxes { get; set; }

        /// <summary>
        /// Specifies the Edt charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredEdtCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EdtCharge> PreferredEdtCharges { get; set; }

        /// <summary>
        /// This is net charges for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetCharge { get; set; }

        /// <summary>
        /// This is total base charges for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalBaseCharge { get; set; }

        /// <summary>
        /// This is total net Charges with Duties And Taxes for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetChargeWithDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetChargeWithDutiesAndTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentRateDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentRateDetail ShipmentRateDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The variable handling charge amount calculated based on the requested variable handling charge detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableHandlingCharges
    {
        /// <summary>
        /// Specifies the total customer assessed handling charges.&lt;br&gt; Example: 445.54
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCustomerCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalCustomerCharge { get; set; }

        /// <summary>
        /// The variable handling charge amount calculated based on the requested variable handling charge detail. &lt;br&gt; Example: 403.2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variableHandlingCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double VariableHandlingCharge { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// estimated duties and tax charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdtCharge
    {
        /// <summary>
        /// Specifies the alternate harmonized codes for the commodity.&lt;br&gt; Example: alternateHarmonizedCodes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateHarmonizedCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AlternateHarmonizedCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("edtTaxDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EdtTaxDetail EdtTaxDetail { get; set; }

        /// <summary>
        /// This is to specify the Harmonized Tariff System (HTS) code to meet U.S. and foreign governments' customs requirements. These are mainly used to estimate the duties and taxes.&lt;br&gt;Example: A six digit code for Almonds fresh or dried is 080211. The HTS code for pistachios in shell is 080251. The HTS code for fish is HS203.&lt;br&gt;To research the classification for your commodity, use the FedEx Global Trade Manager online at &lt;a href='http://www.fedex.com/gtm' target='_blank'&gt;fedex.com/gtm&lt;/a&gt;. You can find the commodities and its respective codes by logging into FedEx and selecting harmonized code option. You will find country-specific information to determine whether your commodity is considered to be a document or non-document for your destination. &lt;br&gt;For additional information about harmonized code, refer to &lt;a href='https://www.usitc.gov/documents/hts_external_guide.pdf' target='_blank'&gt;harmonized code&lt;/a&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("harmonizedCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HarmonizedCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the Estimated duties and taxes detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdtTaxDetail
    {
        /// <summary>
        /// Specifies the Estimated duties and taxes type. &lt;br&gt; Example: TaxType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edtTaxType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdtTaxType { get; set; }

        /// <summary>
        /// Specifies the amount for the estimated duties and taxes type.&lt;br&gt; Example: 785.12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies the Estimated duties and taxes taxable Value.&lt;br&gt; Example: 562.23
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxableValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TaxableValue { get; set; }

        /// <summary>
        /// Indicates the name for the Etd tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates the description for the Etd tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates the formula.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formula", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Formula { get; set; }

        /// <summary>
        /// Specifies the Estimated duties and taxes effective date. Format [YYYY-MM-DD].&lt;br&gt;  Example: 2019-12-06
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectiveDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RatedPackageDetail
    {
        /// <summary>
        /// This is the  list net charge minus actual net charge.&lt;br&gt; Example: 1.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveNetDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double EffectiveNetDiscount { get; set; }

        [Newtonsoft.Json.JsonProperty("packageRateDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageRateDetail PackageRateDetail { get; set; }

        /// <summary>
        /// This is group number, used only with package groups as a unique identifier of each group of identical packages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GroupNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AncillaryFeesAndTaxes
    {
        /// <summary>
        /// Specifies the list of ancillary fees And Taxes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Identifies the amount of the shipment-level fees and taxes that are not based on transportation charges or commodity-level estimated duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Identifies the total amount of the shipment-level fees and taxes that are not based on transportation charges or commodity-level estimated duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The freight transit details such as origin, destination, and distance between origin and destination.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightTransitLocationDetail
    {
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Distance Distance { get; set; }

        [Newtonsoft.Json.JsonProperty("destinationLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDetail DestinationLocation { get; set; }

        [Newtonsoft.Json.JsonProperty("originLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDetail OriginLocation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Freight total distance between origin and destination city centers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Distance
    {
        /// <summary>
        /// Indicate the unit of measure for the distance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DistanceUnits Units { get; set; }

        /// <summary>
        /// Indicate the distance. quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationDetail
    {
        [Newtonsoft.Json.JsonProperty("geoPositionalCoordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoPositionalCoordinates GeoPositionalCoordinates { get; set; }

        /// <summary>
        /// Specifies the store hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storeHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LocationHours> StoreHours { get; set; }

        /// <summary>
        /// The unique FedEx location identifier. &lt;br&gt;Example: HKAA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationId { get; set; }

        /// <summary>
        /// Specifies the special instructions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecialInstructions { get; set; }

        /// <summary>
        /// Specifies the location attribute type list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationAttributeTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<LocationAttributeTypes> LocationAttributeTypes { get; set; }

        /// <summary>
        /// Specifies the map URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mapURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MapURL { get; set; }

        /// <summary>
        /// Specifies the location type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationDetailLocationType LocationType { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAndAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress ContactAndAddress { get; set; }

        /// <summary>
        /// Specifies the carrierDetails.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CarrierDetails> CarrierDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The ISO6709 GeographicCoordinates for a specific geographic location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoPositionalCoordinates
    {
        /// <summary>
        /// Specifies the latitude.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }

        /// <summary>
        /// Specifies the longitude.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the location hours for a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationHours
    {
        /// <summary>
        /// Specifies the exceptional hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptionalHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimeRange> ExceptionalHours { get; set; }

        /// <summary>
        /// The days of the week for which this capability applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dayofweek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationHoursDayofweek Dayofweek { get; set; }

        /// <summary>
        /// Specifies the operational hours type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationalHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimeRange> OperationalHours { get; set; }

        /// <summary>
        /// Operating hours for the location that are exception from the normal hours of operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptionalHoursType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationHoursExceptionalHoursType ExceptionalHoursType { get; set; }

        /// <summary>
        /// Specifies the operating hours for the location that are exception from the normal hours of operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationalHoursType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationHoursOperationalHoursType OperationalHoursType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the time range.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeRange
    {
        /// <summary>
        /// Specifies the start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("begins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Begins { get; set; }

        /// <summary>
        /// Specifies the end time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ends", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ends { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the carrier details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CarrierDetails
    {
        /// <summary>
        /// Specifies the country relationship (domestic and/or  international) among the shipments being picked up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryRelationshipType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CarrierDetailsCountryRelationshipType CountryRelationshipType { get; set; }

        /// <summary>
        /// Specifies the type of carrier code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCodeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CarrierDetailsCarrierCodeType CarrierCodeType { get; set; }

        [Newtonsoft.Json.JsonProperty("latestDropoffDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LatestDropoffDetails LatestDropoffDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes the latest dropoff details for the location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LatestDropoffDetails
    {
        /// <summary>
        /// The days of the week for which this capability applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LatestDropoffDetailsDayOfWeek DayOfWeek { get; set; }

        [Newtonsoft.Json.JsonProperty("operationalOverlay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overlay OperationalOverlay { get; set; }

        /// <summary>
        /// Specifies the exceptional time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptionalTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionalTime { get; set; }

        [Newtonsoft.Json.JsonProperty("exceptionalOverlay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overlay ExceptionalOverlay { get; set; }

        /// <summary>
        /// Specifies the operation time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the overlay.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Overlay
    {
        /// <summary>
        /// Specifies the time for the overlay occurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time { get; set; }

        /// <summary>
        /// Specifies the description for the overlay occurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverlayType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the Operational Details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationalDetail
    {
        /// <summary>
        /// Indicate the location ID of the origin of shipment. &lt;br&gt; Example: YBZA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originLocationIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OriginLocationIds { get; set; }

        /// <summary>
        /// Indicate the delivery commitment day.&lt;br&gt; Example: MON
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CommitDays { get; set; }

        /// <summary>
        /// Indicate the service code. &lt;br&gt; Example: 06
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceCode { get; set; }

        /// <summary>
        /// Specify the Airport Id. &lt;br&gt; Example: MEM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("airportId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AirportId { get; set; }

        /// <summary>
        /// Indicate the Standard Carrier Alpha Code (SCAC) is a privately controlled US code used to identify vessel operating common carriers (VOCC). It is typically two to four letters long.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scac", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scac { get; set; }

        /// <summary>
        /// Specify origin service area.&lt;br&gt; Example: AM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originServiceAreas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OriginServiceAreas { get; set; }

        /// <summary>
        /// Specify the delivery commitment day. &lt;br&gt; Example: SAT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryDay { get; set; }

        /// <summary>
        /// Specify the origin location ID.&lt;br&gt; Example: 6121
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originLocationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> OriginLocationNumbers { get; set; }

        /// <summary>
        /// Indicate the destination postal code.&lt;br&gt; Example: 38017
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationPostalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationPostalCode { get; set; }

        /// <summary>
        /// Indicate the shipment Commit Date. &lt;br&gt; Example: 2019-07-22T08:30:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommitDate { get; set; }

        /// <summary>
        /// Indicate the ASTRA description for the label. &lt;br&gt; Example: XXXL1ST
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AstraDescription { get; set; }

        /// <summary>
        /// Indicate the delivery date. &lt;br&gt; Example: 2019-07-22T08:30:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryDate { get; set; }

        /// <summary>
        /// Indicate the delivery eligibilities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryEligibilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DeliveryEligibilities { get; set; }

        /// <summary>
        /// indicate if ineligible For Money Back Guarantee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ineligibleForMoneyBackGuarantee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IneligibleForMoneyBackGuarantee { get; set; }

        /// <summary>
        /// Specify Maximum transit time. &lt;br&gt; Example: THREE_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumTransitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaximumTransitTime { get; set; }

        /// <summary>
        /// Indicate Astra Planned Service Level. &lt;br&gt; Example: astraPlannedServicelevel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraPlannedServiceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AstraPlannedServiceLevel { get; set; }

        /// <summary>
        /// Indicate Destination Location Ids. &lt;br&gt; Example: HKAA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DestinationLocationIds { get; set; }

        /// <summary>
        /// Indicate destination location State Or Province code. &lt;br&gt; Example: TN&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State Or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationStateOrProvinceCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DestinationLocationStateOrProvinceCodes { get; set; }

        /// <summary>
        /// Indicate the Transit Time in days. &lt;br&gt; Example: THREE_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitTime { get; set; }

        /// <summary>
        /// Indicate the Packaging Code. &lt;br&gt; Example: M1M1M1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackagingCode { get; set; }

        /// <summary>
        /// Indicate the Destination Location Numbers. &lt;br&gt; Example: 386
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> DestinationLocationNumbers { get; set; }

        /// <summary>
        /// Indicate the Published Delivery Time. &lt;br&gt; Example: THREE_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publishedDeliveryTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublishedDeliveryTime { get; set; }

        /// <summary>
        /// Indicate the Country Code.&lt;br&gt;Example: [ US, IN]&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CountryCodes { get; set; }

        /// <summary>
        /// Specify the state Or Province Code. State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2.&lt;br&gt; Example: TN&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State Or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StateOrProvinceCodes { get; set; }

        /// <summary>
        /// This is FedEx URSA Prefix Code. &lt;br&gt; Example: PrefixCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ursaPrefixCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrsaPrefixCode { get; set; }

        /// <summary>
        /// This is URSA Suffix Code. &lt;br&gt; Example: SuffixCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ursaSuffixCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrsaSuffixCode { get; set; }

        /// <summary>
        /// This is Destination Service Areas. &lt;br&gt; Example: A2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationServiceAreas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DestinationServiceAreas { get; set; }

        /// <summary>
        /// This is Origin Postal Codes. &lt;br&gt; Example: M1M1M1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originPostalCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OriginPostalCodes { get; set; }

        /// <summary>
        /// This is Custom Transit Time in days. &lt;br&gt; Example: THREE_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customTransitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomTransitTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the broker address used for this shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Brokeraddress
    {
        /// <summary>
        /// This is the combination of number, street name, etc. &lt;br&gt;Note: At least one line is required and streetlines more than 3 will be ignored. Empty lines should not be included. Maximum Length per line is 35.&lt;br&gt;Example: [10 FedEx Parkway, Suite 302, .etc.]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; }

        /// <summary>
        /// This is city name.&lt;br&gt; Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// This is the state Or Province Code.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2 &lt;br&gt; Example: CA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State Or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// This is the postal code. &lt;br&gt; Example: 90210&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// This is the country code.&lt;br&gt;US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        /// <summary>
        /// Specifies the classification of the address. &lt;br&gt; Example: residential
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Classification { get; set; }

        /// <summary>
        /// Specifies the geographic coordinates.&lt;br&gt; Example: geographicCoordinates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("geographicCoordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GeographicCoordinates { get; set; }

        /// <summary>
        /// Specifies the urbanization code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urbanizationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrbanizationCode { get; set; }

        /// <summary>
        /// Specifies the country name.&lt;br&gt; Example: India
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are date and time details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateDetail
    {
        /// <summary>
        /// The days of the week for which this capability applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DayOfWeek { get; set; }

        /// <summary>
        /// This is expected delivery date in format [YYYY-MM-DDTHH:mm:ss]&lt;br&gt;Example: 2020-07-16T10:30:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dayFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DayFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are number of days the package/shipment is to be in transit. Applies to Ground and LTL Freight; indicates minimum transit time for SmartPost.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransitDays
    {
        /// <summary>
        /// Indicates the number of days the package/shipment is to be in transit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// This is the code indicating the number of transit days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumTransitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransitDaysMinimumTransitTime MinimumTransitTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request elements required to create a Freight2020Shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullSchemaFreightShipment
    {
        [Newtonsoft.Json.JsonProperty("freightRequestedShipment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FreightRequestedShipment_Freight FreightRequestedShipment { get; set; } = new FreightRequestedShipment_Freight();

        /// <summary>
        /// &lt;p&gt;If the value is LABEL, the encoded label will be included in the response and if the value is  URL_ONLY, the response will include the URLs.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Note: With URL_ONLY option, the URL once created will be active for 24 hours.&lt;/i&gt;&lt;/p&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelResponseOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FullSchemaFreightShipmentLabelResponseOptions LabelResponseOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipperAccountNumber AccountNumber { get; set; } = new ShipperAccountNumber();

        /// <summary>
        /// If the value is false, it uses single shot MPS shipments where in all the packages are processed in the same transaction and can generate number of labels for the handling units all at once. If the value is true, the MPS shipment processes packages and labels one at a time. Default value is false. 
        /// <br/> &lt;br&gt;Example: true or false
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oneLabelAtATime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OneLabelAtATime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the Shipper contact details for this shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipperParty
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyAddress Address { get; set; } = new PartyAddress();

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyContact Contact { get; set; } = new PartyContact();

        /// <summary>
        /// This is the tax identification number details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxpayerIdentification> Tins { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxpayerIdentification
    {
        /// <summary>
        /// Specify tax ID number. Maximum length is 18. &lt;br&gt;Example: 123567
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>
        /// Indicate the type of tax identification number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tinType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaxpayerIdentificationTinType TinType { get; set; }

        /// <summary>
        /// Specify the reason for using the tax identification number in shipment processing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Usage { get; set; }

        /// <summary>
        /// Specify the tax ID effective date.&lt;br&gt;Example: 2000-01-23T04:56:07.000+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Specify the tax ID expiration date.&lt;br&gt;Example: 2000-01-23T04:56:07.000+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Will indicate the party responsible for purchasing the goods shipped from the shipper to the recipient. The sold to party is not necessarily the recipient or the importer of record. The sold to party is relevant when the purchaser, rather than the recipient determines when certain customs regulations apply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoldToParty
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAddress Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyContact Contact { get; set; }

        /// <summary>
        /// Used for adding the tax id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxpayerIdentification> Tins { get; set; }

        /// <summary>
        /// Identification of a specific FedEx customer account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumber AccountNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The descriptive information for the recipient of the shipment and the physical location for the package destination.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecipientParty
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyAddress Address { get; set; } = new PartyAddress();

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyContact Contact { get; set; } = new PartyContact();

        /// <summary>
        /// This is the tax identification number details. Used for adding the tax id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxpayerIdentification> Tins { get; set; }

        /// <summary>
        /// Specify the delivery instructions to be added with the Freight shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryInstructions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the details about who and how the shipment will be paid for.&lt;br&gt;'payor' is optional when 'paymentType' provided is SENDER.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightPayment
    {
        /// <summary>
        /// Indicates who and how the shipment will be paid for.
        /// <br/>Required for Express and Ground.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightPaymentPaymentType PaymentType { get; set; }

        [Newtonsoft.Json.JsonProperty("payor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payor Payor { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the assigned FedEx Account Number. If the transportation charges to be billed to a payor other than the sender or recipient, provide the FedEx Account Number. Specify this field when payment type is selected as SENDER.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartyAccountNumber
    {
        /// <summary>
        /// This is the account number. Maximum length is 9. &lt;br&gt;Example: Your account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These special services are available at the shipment level for some or all service types. If the shipper is requesting a special service which requires additional data (such as DO_NOT_STACK_PALLETS), the shipment special service type must be present in the specialServiceTypes collection, and the supporting detail must be provided in the appropriate sub-object below.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightShipment2020SpecialServicesRequested
    {
        /// <summary>
        /// Special services requested for the shipment.&lt;br&gt;Example: FREIGHT_GUARANTEE &lt;br&gt;&lt;a onclick='loadDocReference("freightlevelspecialservicetypes")'&gt;Click here to see Freight Level Special Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialServiceTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SpecialServiceTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("freightGuaranteeDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FreightGuaranteeDetail FreightGuaranteeDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("freightDirectDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FreightDirectDetail FreightDirectDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("customDeliveryWindowDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomDeliveryWindowDetail CustomDeliveryWindowDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates shipment to be sent at a specific time, on a specific date, or sometime within a specific date range.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomDeliveryWindowDetail
    {
        /// <summary>
        /// Indicates the date requested. Only used if Type is ON, BEFORE or AFTER&lt;br&gt;Example: 2023-05-15
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestDate { get; set; }

        /// <summary>
        /// Indicates the time requested.&lt;br&gt;Format: HH:MM:SS&lt;br&gt;Example: 10:00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestTime { get; set; }

        [Newtonsoft.Json.JsonProperty("requestRange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RetrieveDateRange RequestRange { get; set; }

        /// <summary>
        /// Indicates the type of shipment.&lt;br&gt;Example: AFTER
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomDeliveryWindowDetailType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the freight Direct Detail.It is used for Fedex Freight Direct.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightDirectDetail
    {
        /// <summary>
        /// This field provides the list of data for Fedex Direct Detail service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightDirectDataDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FreightDirectDataDetails> FreightDirectDataDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This field provides the data details for Fedex Freight Detail service.There can be maximum of two allowed values for this field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightDirectDataDetails
    {
        /// <summary>
        /// This field provides the type for FedexFreight Detail service.&lt;br&gt; Example: &lt;ul&gt;&lt;li&gt;BASIC&lt;/li&gt;&lt;li&gt;BASIC_BY_APPOINTMENT&lt;/li&gt;&lt;li&gt;PREMIUM&lt;/li&gt;&lt;li&gt;STANDARD&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightDirectDataDetailsType Type { get; set; }

        /// <summary>
        /// This field provides the transportation type for Fedex Freight Detail service.&lt;br&gt; Example: &lt;ul&gt;&lt;li&gt;DELIVERY&lt;/li&gt;&lt;li&gt;PICKUP&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transportationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightDirectDataDetailsTransportationType TransportationType { get; set; }

        /// <summary>
        /// This field provides the email address associated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumberDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FreightPhoneNumberDetail> PhoneNumberDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This field provides the phone Number details for the service.There can be maximum of five types of phoneNumber which can be provided in request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightPhoneNumberDetail
    {
        /// <summary>
        /// This provides the type of phoneNumber being used in request.&lt;br&gt; Example: &lt;ul&gt;&lt;li&gt;FAX&lt;/li&gt;&lt;li&gt;HOME&lt;/li&gt;&lt;li&gt;MOBILE&lt;/li&gt;&lt;li&gt;PAGER&lt;/li&gt;&lt;li&gt;TOLL_FREE&lt;/li&gt;&lt;li&gt;WORK&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumberType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightPhoneNumberDetailPhoneNumberType PhoneNumberType { get; set; }

        /// <summary>
        /// This provides the phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the freight direct data detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightDirectDataDetail
    {
        /// <summary>
        /// Special freight direct detail. &lt;br&gt; Example: &lt;ul&gt;&lt;li&gt;BASIC&lt;/li&gt;&lt;li&gt;BASIC_BY_APPOINTMENT&lt;/li&gt;&lt;li&gt;PREMIUM&lt;/li&gt;&lt;li&gt;STANDARD&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightDirectDataDetailType Type { get; set; }

        /// <summary>
        /// Specifies freight direct transportation type. &lt;br&gt; Example: &lt;ul&gt;&lt;li&gt;DELIVERY&lt;/li&gt;&lt;li&gt;PICKUP&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transportationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightDirectDataDetailTransportationType TransportationType { get; set; }

        /// <summary>
        /// Specifies the email address.&lt;br&gt;Example: a@fedex.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumberDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PhoneNumberDetails> PhoneNumberDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Range of dates for custom delivery request.Only used if type is BETWEEN.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RetrieveDateRange
    {
        /// <summary>
        /// Indicates the start date.&lt;br&gt;Example: 12-01-2020
        /// </summary>
        [Newtonsoft.Json.JsonProperty("begins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Begins { get; set; }

        /// <summary>
        /// Indicates the end date.&lt;br&gt;Example: 12-01-2020
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ends", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ends { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are email disposition details. Provides the type and email addresses of e-mail recipients. If returnedDispositionDetail in labelSpecification is set as true then email will be send with label and documents copy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EMailNotificationDetail
    {
        /// <summary>
        /// Indicate the shipment notification aggregation type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EMailNotificationDetailAggregationType AggregationType { get; set; }

        /// <summary>
        /// These are email notification recipient details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailNotificationRecipients", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmailNotificationRecipient> EmailNotificationRecipients { get; set; }

        /// <summary>
        /// This is your personal message for the email.&lt;br&gt;&lt;br&gt;Note: The maximum personal message character limit depends on the element emailNotificationDetail\emailNotificationRecipients\notificationFormatType values:&lt;ul&gt;&lt;li&gt;If notificationFormatType is TEXT, then only 120 characters printed on the email&lt;/li&gt;&lt;li&gt;If notificationFormatType is HTML, then 500 characters printed on the email&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;Example: This is concerning the order 123456 of 26 July 2021 - art no 34324-23 Teddy Bear, brown
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalMessage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are recipient details for receiving email notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailNotificationRecipient
    {
        /// <summary>
        /// Specify the recipient name.&lt;br&gt;Example: Joe Smith
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Specify the recipient type for email notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailNotificationRecipientType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailNotificationRecipientType EmailNotificationRecipientType { get; set; }

        /// <summary>
        /// Specify the recipient email address.&lt;br&gt;Example: xyz@aol.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// This is the format for the email notification. Either HTML or plain text can be provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationFormatType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailNotificationRecipientNotificationFormatType NotificationFormatType { get; set; }

        /// <summary>
        /// Indicate the type of notification that will be sent as an email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailNotificationRecipientNotificationType NotificationType { get; set; }

        /// <summary>
        /// These are the locale details for email.&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;click here to see Locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid local is entered, an invalid error message is returned in response
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        /// <summary>
        /// Specify notification event types.&lt;br&gt;&lt;a onclick='loadDocReference("notificationeventtypes")'&gt;Click here for more information on Notification Event Types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationEventType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<NotificationEventType> NotificationEventType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the details specific to a FedEx Freight LTL shipment (i.e., FEDEX_FREIGHT_ECONOMY and FEDEX_FREIGHT_PRIORITY services). If freight shipment detail is applicable, then the following fields are required: totalHandlingUnits, fedExFreightBillingContactAndAddress, lineItem, and role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Freight2020ShipmentDetail
    {
        /// <summary>
        /// Required&lt;br&gt;
        /// <br/>Indicates the role of the party submitting the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Freight2020ShipmentDetailRole Role { get; set; }

        /// <summary>
        /// Indicates which party will pay surcharges for any special services which support split billing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialServicePayments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FreightSpecialServicePayment> SpecialServicePayments { get; set; }

        [Newtonsoft.Json.JsonProperty("liabilityCoverageDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiabilityCoverageDetail LiabilityCoverageDetail { get; set; }

        /// <summary>
        /// Conditional
        /// <br/>
        /// <br/> FedEx Freight account number used with FEDEX_FREIGHT_ECONOMY or FEDEX_FREIGHT_PRIORITY  service; required for account-specific Freight rates.This is mandatory for all LTL Freight shipments except Bill To shipments. Note if the shipper is responsible for the transaportation charges, enter the SAME account number in the FedExFreightAccountNumber that is entered in the ShippingChargesPayment/Payor/ResponsibleParty/AccountNumber. If the shipper is not responsible for the transportation charges, enter a valid FedEx Freight Account Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fedExFreightAccountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAccountNumber FedExFreightAccountNumber { get; set; }

        /// <summary>
        /// Indicates the Declared value units&lt;br&gt;Example: LBS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declaredValueUnits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeclaredValueUnits { get; set; }

        /// <summary>
        /// Specifies the references to be printed on the invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printedReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PrintedReference> PrintedReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("hazardousMaterialsEmergencyContactNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PhoneNumber HazardousMaterialsEmergencyContactNumber { get; set; }

        /// <summary>
        /// Required
        /// <br/>
        /// <br/>Class/weight pairs and associated details for a Freight shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineItem", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FreightShipmentLineItem_2> LineItem { get; set; } = new System.Collections.ObjectModel.Collection<FreightShipmentLineItem_2>();

        /// <summary>
        /// Conditional&lt;br&gt; This is only used for anonymous rate requests&lt;br&gt;Example: 5.12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientDiscountPercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClientDiscountPercent { get; set; }

        /// <summary>
        /// Coupons&lt;br&gt;Example: [PROMO1, 10offtoday]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coupons", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Coupons { get; set; }

        [Newtonsoft.Json.JsonProperty("fedExFreightBillingContactAndAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LTL_ContactAndAddress FedExFreightBillingContactAndAddress { get; set; } = new LTL_ContactAndAddress();

        /// <summary>
        /// Conditional&lt;br&gt;Indicates the LTL Account Alias identifier.&lt;br&gt;Example: 981234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aliasID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AliasID { get; set; }

        /// <summary>
        /// Indicates the terms of the collect payment for a Freight shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectTermsType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Freight2020ShipmentDetailCollectTermsType CollectTermsType { get; set; }

        /// <summary>
        /// Specifies the Hazardous materials offeror
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardousMaterialsOfferor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HazardousMaterialsOfferor { get; set; }

        [Newtonsoft.Json.JsonProperty("declaredValuePerUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money DeclaredValuePerUnit { get; set; }

        /// <summary>
        /// Total number of individual handling units in the entire shipment (for unit pricing). May not be negative.&lt;br&gt;Example: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalHandlingUnits", Required = Newtonsoft.Json.Required.Always)]
        public int TotalHandlingUnits { get; set; }

        /// <summary>
        /// The descriptive data for the alternateBilling party for the shipment and their physical location.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateBillingParty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_2 AlternateBillingParty { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightSpecialServicePayment
    {
        /// <summary>
        /// Indicates the requested Special Services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialService", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecialService { get; set; }

        /// <summary>
        /// Indicates the payment type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightSpecialServicePaymentPaymentType PaymentType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is used specify the line item level liability coverage.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiabilityCoverageDetail
    {
        /// <summary>
        /// This is the liability coverage type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverageType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiabilityCoverageDetailCoverageType CoverageType { get; set; }

        /// <summary>
        /// Indicate the coverage amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverageAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money CoverageAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrintedReference
    {
        /// <summary>
        /// Identifies a particular reference identifier printed on a Freight bill of lading.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printedReferenceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrintedReferenceType PrintedReferenceType { get; set; }

        /// <summary>
        /// Indicates the value for printed type.&lt;br&gt; Example: 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the phone number. Only numeric values allowed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhoneNumber
    {
        /// <summary>
        /// Indicate the Area Code for the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("areaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaCode { get; set; }

        /// <summary>
        /// Indicate the local phone number for contacting in the event of an emergency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalNumber { get; set; }

        /// <summary>
        /// Indicate the extension for the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        /// <summary>
        /// Indicate the two-letter country code.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Indicate the Personal Identification Number associated with the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalIdentificationNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the dimensions of the package.&lt;br&gt; Following conditions will apply: &lt;ul&gt;&lt;li&gt;Dimensions are optional but when added, then all three dimensions must be indicated.&lt;/li&gt;&lt;li&gt;Dimensions are required with YOUR_PACKAGING package type.&lt;/li&gt;&lt;/ul&gt;Note: The maximum/minimum dimension values varies based on the services and the packaging types. Refer &lt;a href="https://www.fedex.com/en-us/service-guide.html" target="_blank"&gt;FedEx Service Guide&lt;/a&gt; for service details related to DIM Weighting for FedEx Express and oversize conditions for FedEx Express and FedEx Ground.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineItemsDimensions
    {
        /// <summary>
        /// Indicate the length of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        /// <summary>
        /// Indicate the width of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        /// <summary>
        /// Indicate the height of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        /// <summary>
        /// Indicate the Unit of measure for the provided dimensions.&lt;br&gt;Valid Values are:&lt;li&gt;IN - inches&lt;/li&gt;&lt;li&gt;CM - centimeters&lt;/li&gt;Note: Any value other than CM including blank/null will default to IN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LineItemsDimensionsUnits Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the Billing Contact and Address details of the location for above FedEx Freight Account Number.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTL_ContactAndAddress
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LTL_Address Address { get; set; } = new LTL_Address();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is detailed information on physical location. May be used as an actual physical address (place to which one could go), or as a container of address parts which should be handled as a unit (such as a city-state-ZIP combination within the U.S.).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTL_Address
    {
        /// <summary>
        /// This is the combination of number, street name, etc. &lt;br&gt;Note: At least one line is required and streetlines more than 3 will be ignored. Empty lines should not be included. Maximum length per line is 35.&lt;br&gt;Example: [10 FedEx Parkway, Suite 302, .etc.]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// This is a placeholder for City Name. &lt;br&gt;Note: This is conditional and not required in all the requests. &lt;br&gt;&lt;br&gt;Note: It is recommended for Express shipments for the most accurate ODA and OPA surcharges.&lt;br&gt;&lt;br&gt;Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2&lt;br&gt;&lt;br&gt;Example: CA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;click here to see State or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// Indicate the Postal code. This is Optional for non postal-aware countries. Maximum length is 10.&lt;br&gt; Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code.&lt;br&gt;&lt;br&gt;Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the details about how to calculate variable handling charges at the shipment level. They can be based on a percentage of the shipping charges or a fixed amount. If indicated, element rateLevelType is required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableHandlingChargeDetail
    {
        /// <summary>
        /// This is the rate type used for this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VariableHandlingChargeDetailRateType RateType { get; set; }

        /// <summary>
        /// This is the variable handling percentage. If the percent value is mentioned as 10, it means 10%(multiplier of 0.1).&lt;br&gt;Example: 12.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double PercentValue { get; set; }

        /// <summary>
        /// Specifies if the rate level type is either Individual or Bundled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateLevelType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VariableHandlingChargeDetailRateLevelType RateLevelType { get; set; }

        /// <summary>
        /// This is to specify a fixed handling charge on the shipment. The element allows entry of 7 characters before the decimal and 2 characters following the decimal. &lt;br&gt;Example: 5.00.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money FixedValue { get; set; }

        /// <summary>
        /// Specify the charge type upon which the variable handling percentage amount is calculated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateElementBasis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VariableHandlingChargeDetailRateElementBasis RateElementBasis { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are customs clearance details. &lt;br&gt;Required for International and intra-country Shipments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomsClearanceDetail
    {
        /// <summary>
        /// These are the regulatory controls applicable to the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regulatoryControls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<RegulatoryControls> RegulatoryControls { get; set; }

        /// <summary>
        /// Specify broker information. Use this option only if you are using Broker Select Option for your shipment. A country code must be specified in addition to one of the following address items: postal code, city, or location id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BrokerDetail_2> Brokers { get; set; }

        [Newtonsoft.Json.JsonProperty("commercialInvoice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CommercialInvoice CommercialInvoice { get; set; } = new CommercialInvoice();

        /// <summary>
        /// Specify the risk owner for the Freight shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightOnValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomsClearanceDetailFreightOnValue FreightOnValue { get; set; }

        [Newtonsoft.Json.JsonProperty("dutiesPayment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payment DutiesPayment { get; set; }

        /// <summary>
        /// Indicates the details about the dutiable packages. Maximum upto 999 commodities per shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commodities", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Commodity> Commodities { get; set; } = new System.Collections.ObjectModel.Collection<Commodity>();

        /// <summary>
        /// Used to specify if a shipment is document shipment or not. Used only for International Express document shipments. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDocumentOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDocumentOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("recipientCustomsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecipientCustomsId RecipientCustomsId { get; set; }

        [Newtonsoft.Json.JsonProperty("customsOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomsOptionDetail CustomsOption { get; set; }

        /// <summary>
        /// The descriptive data for the importer of Record for the shipment and their physical address, contact and account number information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importerOfRecord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_2 ImporterOfRecord { get; set; }

        /// <summary>
        /// This is the locale for generated document.&lt;br&gt;Example: en_US&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;click here to see Locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generatedDocumentLocale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GeneratedDocumentLocale { get; set; }

        [Newtonsoft.Json.JsonProperty("exportDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExportDetail ExportDetail { get; set; }

        /// <summary>
        /// This is the total customs value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCustomsValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money TotalCustomsValue { get; set; }

        /// <summary>
        /// Specify if the transacting parties are related.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partiesToTransactionAreRelated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PartiesToTransactionAreRelated { get; set; }

        [Newtonsoft.Json.JsonProperty("declarationStatementDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomsDeclarationStatementDetail DeclarationStatementDetail { get; set; }

        /// <summary>
        /// Specify insurance charges if applicable. &lt;br&gt;&lt;i&gt;Note: FedEx does not provide insurance of any kind.&lt;/i&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money InsuranceCharge { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to provide Commercial Invoice details. This element is required for electronic upload of CI data. It will serve to create/transmit an electronic Commercial Invoice through the FedEx system.&lt;br&gt;Customers are responsible for printing their own Commercial Invoice.&lt;br&gt;If you would like FedEx to generate a Commercial Invoice and transmit it to Customs for clearance purposes, you need to specify that in the ETDDetail/RequestedDocumentCopies element.&lt;br&gt;Supports maximum of 99 commodity line items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommercialInvoice
    {
        /// <summary>
        /// The originator name that will populate the Commercial Invoice (or Pro Forma).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originatorName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginatorName { get; set; }

        /// <summary>
        /// These are comments to populated on the Commercial Invoice (or Pro Forma). &lt;br&gt;Example: comments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Comments { get; set; }

        /// <summary>
        /// These are additional customer reference data.&lt;br&gt;Note: The groupPackageCount must be specified to retrieve customer references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerReference> CustomerReferences { get; set; }

        /// <summary>
        /// Indicate the taxes or miscellaneous charges(other than freight charges or insurance charges) that are associated with the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxesOrMiscellaneousCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money TaxesOrMiscellaneousCharge { get; set; }

        /// <summary>
        /// Indicate the type of taxes Or miscellaneous charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxesOrMiscellaneousChargeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommercialInvoiceTaxesOrMiscellaneousChargeType TaxesOrMiscellaneousChargeType { get; set; }

        /// <summary>
        /// Indicate the freight charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money FreightCharge { get; set; }

        /// <summary>
        /// Indicate the packing cost.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingCosts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money PackingCosts { get; set; }

        /// <summary>
        /// Indicate the handling cost.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("handlingCosts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money HandlingCosts { get; set; }

        /// <summary>
        /// This is the declaration statement which will populate the Commercial Invoice (or Pro Forma).&lt;br&gt;Maximum length is 554.&lt;br&gt;Example: declarationStatement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declarationStatement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeclarationStatement { get; set; }

        /// <summary>
        /// Specify terms Of Sale that will be populated on the Commercial Invoice (or Pro Forma). Maximum length is 3&lt;br&gt;Valid values are:&lt;ul&gt;&lt;li&gt;FCA/FOB (Free Carrier/Free On Board): Seller is responsible for all costs of delivering goods to destination. (Default)&lt;/li&gt;&lt;li&gt;CIP (Costs, Insurance Paid): Seller is responsible for miscellaneous charges to destination.&lt;/li&gt;&lt;li&gt;CPT (Carriage Paid To): Buyer is responsible for insurance.&lt;/li&gt;&lt;li&gt;EXW (Ex Works): Seller makes goods available to buyer. Buyer is responsible for delivering goods to destination.&lt;/li&gt;&lt;li&gt;DDU (Delivered Duty Unpaid): Seller is responsible for delivering goods to destination. Buyer is responsible for clearing goods through Bureau of Customs and Border Protection.&lt;/li&gt;&lt;li&gt;DDP (Delivered Duty Paid): Seller is responsible for delivering goods to destination, including duties, taxes, and miscellaneous fees.&lt;/li&gt;&lt;li&gt;DAP (Delivered at Place): Seller pays for carriage to the named place, except for costs related to import clearance, and assumes all risks prior to the point that the goods are ready for unloading by the buyer.&lt;/li&gt;&lt;li&gt;DPU(Deliver at Place of Unloading)&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termsOfSale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TermsOfSale { get; set; }

        /// <summary>
        /// These are special instructions that will be populated on the Commercial Invoice (or Pro Forma).&lt;br&gt;Example: specialInstructions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecialInstructions { get; set; }

        /// <summary>
        /// This is the reason for the shipment. &lt;br&gt;Note: SOLD is not a valid purpose for a Proforma Invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentPurpose", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommercialInvoiceShipmentPurpose ShipmentPurpose { get; set; }

        [Newtonsoft.Json.JsonProperty("emailNotificationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipEmailDispositionDetail EmailNotificationDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReference
    {
        /// <summary>
        /// This is a customer reference type. The value specified here for the element is printed on the Commercial Invoice only for tracking and label information.&lt;p&gt;Note: &lt;ul&gt;&lt;li&gt;The P_O_NUMBER value must be specified in customerReferences under requestedPackageLineItems&lt;/li&gt;&lt;li&gt;The INVOICE_NUMBER value that is printed on the FedEx-supplied invoice must be specified in customerReferences under commercialInvoice. Value defined in this section will print on the label that is attached to the package&lt;/li&gt;&lt;/ul&gt; &lt;br&gt;Note: INTRACOUNTRY_REGULATORY_REFERENCE is applicable only in Intra-Brazil.&lt;br&gt;&lt;a onclick='loadDocReference("customerreferencetypes")'&gt;For more information, click here for Cutsomer References ENUMs&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReferenceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerReferenceType CustomerReferenceType { get; set; }

        /// <summary>
        /// This is a customer reference type value.&lt;br&gt;Example: 3686&lt;br&gt;Note: Maximum length for all customer references is 40 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are email disposition details. Provides the type and email addresses of e-mail recipients. If returnedDispositionDetail in labelSpecification is set as true then email will be send with label and documents copy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipEmailDispositionDetail
    {
        /// <summary>
        /// This is email Address.&lt;br&gt;Example: xxxx@xxx.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Specify the email status.&lt;br&gt;Example: EMAILED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Specify the recipient Type.&lt;br&gt;Example: SHIPPER/BROKER
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecipientType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are billing details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingDetails
    {
        /// <summary>
        /// Indicates a billing code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingCode { get; set; }

        /// <summary>
        /// These are duties and taxes billing type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingType { get; set; }

        /// <summary>
        /// This is bill to alias identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aliasId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AliasId { get; set; }

        /// <summary>
        /// This is account nick name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNickname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNickname { get; set; }

        /// <summary>
        /// This is bill to account number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// This is the country code of the account number.&lt;br&gt;Example: CA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumberCountryCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Commodity
    {
        /// <summary>
        /// This is the unit price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Money UnitPrice { get; set; } = new Money();

        /// <summary>
        /// This object contains additional quantitative information other than weight and quantity to calculate duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalMeasures", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalMeasures> AdditionalMeasures { get; set; }

        /// <summary>
        /// Indicate the number of pieces associated with the commodity. The value can neither be negative nor exceed 9,999.&lt;br&gt;Example: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfPieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfPieces { get; set; }

        /// <summary>
        /// This is the units quantity (using quantityUnits as the unit of measure) per commodity. This is used to estimate duties and taxes.&lt;br&gt; Example: 125
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }

        /// <summary>
        /// This is the unit of measure for the units quantity. This is used to estimate duties and taxes.&lt;br&gt;Example: EA&lt;br&gt;&lt;a onclick='loadDocReference("harmonizedsystemcodeunitofmeasure-table1")'&gt;click here to see Commodity Unit Measures&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuantityUnits { get; set; }

        /// <summary>
        /// This is the customs value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customsValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money CustomsValue { get; set; }

        /// <summary>
        /// This is commodity country of manufacture. This is required for International shipments. Maximum allowed length is 4.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfManufacture", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryOfManufacture { get; set; }

        /// <summary>
        /// This is an identifying mark or number used on the packaging of a shipment to help customers identify a particular shipment&lt;br&gt;Example: 87123
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cIMarksAndNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CIMarksAndNumbers { get; set; }

        /// <summary>
        /// This is to specify the Harmonized Tariff System (HTS) code to meet U.S. and foreign governments' customs requirements. These are mainly used to estimate the duties and taxes.&lt;br&gt;Example: 0613&lt;br&gt;To research the classification for your commodity, use the FedEx Global Trade Manager online at &lt;a href='http://www.fedex.com/gtm' target='_blank'&gt;fedex.com/gtm&lt;/a&gt;. You will find country-specific information to determine whether your commodity is considered to be a document or non-document for your destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("harmonizedCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HarmonizedCode { get; set; }

        /// <summary>
        /// This is the commodity description. Maximum allowed 450 characters.&lt;br&gt;&lt;a onclick='loadDocReference("vaguecommoditydescriptions")'&gt;click here to see Vague commodity descriptions&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// This is Commodity name.&lt;br&gt;Example: Non-Threaded Rivets
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        /// <summary>
        /// This is the export license number for the shipment.&lt;br&gt;Example: 26456
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportLicenseNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExportLicenseNumber { get; set; }

        /// <summary>
        /// Specify the export license expiration date for the shipment.&lt;br&gt;Format YYYY-MM-DD&lt;br&gt;Example : 2009-04-12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportLicenseExpirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ExportLicenseExpirationDate { get; set; }

        /// <summary>
        /// This is a part number.&lt;br&gt;Example: 167
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartNumber { get; set; }

        /// <summary>
        /// This is the purpose of this shipment. This is used for calculation of duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommodityPurpose Purpose { get; set; }

        [Newtonsoft.Json.JsonProperty("usmcaDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsmcaDetail UsmcaDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalMeasures
    {
        /// <summary>
        /// Specify commodity quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Quantity { get; set; }

        /// <summary>
        /// Unit of measure used to express the quantity of this commodity line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the USMCA detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsmcaDetail
    {
        /// <summary>
        /// Specify the origin criterion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originCriterion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaDetailOriginCriterion OriginCriterion { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this element to provide valid identification details. Used for populating brazil tax id.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecipientCustomsId
    {
        /// <summary>
        /// This is ID Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RecipientCustomsIdType Type { get; set; }

        /// <summary>
        /// This is the ID number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are customs Option Detail, type must be indicated for each occurrence.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomsOptionDetail
    {
        /// <summary>
        /// Specify additional description about customs options. This is a required field when the Type is OTHER.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Specify the reason for a global return, as recognized by Customs. Valid values:&lt;ul&gt;&lt;li&gt;COURTESY_RETURN_LABEL: For the outbound courtesy return label.&lt;/li&gt;&lt;li&gt;EXHIBITION_TRADE_SHOW: For exhibition or trade-show, outbound and inbound.&lt;/li&gt;&lt;li&gt;FAULTY_ITEM: For faulty item being returned, inbound only.&lt;/li&gt;&lt;li&gt;FOLLOWING_REPAIR: For repaired or processed item being sent, outbound only.&lt;/li&gt;&lt;li&gt;FOR_REPAIR: For repair or processing, outbound and inbound.&lt;/li&gt;&lt;li&gt;ITEM_FOR_LOAN: For loan item, outbound and inbound.&lt;/li&gt;&lt;li&gt;OTHER: Other reason, outbound and inbound. This type requires a description.&lt;/li&gt;&lt;li&gt;REJECTED: For rejected merchandise being returned, inbound.&lt;/li&gt;&lt;li&gt;REPLACEMENT: For replacement being sent, outbound only.&lt;/li&gt;&lt;li&gt;TRIAL: For use in a trial, outbound and inbound.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomsOptionDetailType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are export Detail used for US or CA exports.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExportDetail
    {
        [Newtonsoft.Json.JsonProperty("destinationControlDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinationControlDetail DestinationControlDetail { get; set; }

        /// <summary>
        /// Specify the filing option being exercised. Required for  non-document shipments originating in Canada destinated for any country other than Canada, the United States, Puerto Rico, or the U.S. Virgin Islands.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("b13AFilingOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExportDetailB13AFilingOption B13AFilingOption { get; set; }

        /// <summary>
        /// For US export shipments requiring an EEI, enter the ITN number received from AES when you filed your shipment or the FTR (Foreign Trade Regulations) exemption number.The proper format for an ITN number is AES XYYYYMMDDNNNNNN where YYYYMMDD is date and NNNNNN are numbers generated by the AES.&lt;br&gt; Example: AESX20220714987654&lt;br&gt;Note: The ITN or FTR exemption number you submit in the ship request prints on the international shipping label.&lt;br&gt;&lt;br&gt;For CA export shipments,it can be Proof of report number(15-32 alphanumeric) ,Summary proof of report number(7-32 alphanumeric) or Exemption number(2 digit) based on the selected b13AFilingOption.&lt;br&gt;Example: 98765432107654321(POR number), 7654321(Summary POR number) and 02(Exemption number).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportComplianceStatement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExportComplianceStatement { get; set; }

        /// <summary>
        /// This is a Permit Number. This field is applicable only to Canada export non-document shipments of any value to any destination. No special characters are allowed.&lt;br&gt; Example: 12345
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permitNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermitNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify the appropriate destination control statement type(s). Also make sure to specify destination country and end user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DestinationControlDetail
    {
        /// <summary>
        /// Specify End User name. Its is required if StatementTypes is entered as DEPARTMENT_OF_STATE. &lt;br&gt;Example: John Wick
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUser { get; set; }

        /// <summary>
        /// Specify appropriate destination control statement type(s), Also make sure to specify destination country and end user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statementTypes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DestinationControlDetailStatementTypes StatementTypes { get; set; }

        /// <summary>
        /// Specify DCS shipment destination country. You may enter up to four country codes in this element. Up to 11 alphanumeric characters are allowed.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DestinationCountries { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies about the statements to be declared for Customs. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomsDeclarationStatementDetail
    {
        [Newtonsoft.Json.JsonProperty("usmcaLowValueStatementDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public UsmcaLowValueStatementDetail UsmcaLowValueStatementDetail { get; set; } = new UsmcaLowValueStatementDetail();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the low Value statement necessary for printing the USMCA for Customs documentation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsmcaLowValueStatementDetail
    {
        /// <summary>
        /// Specify the country Of Origin of Low Value Document for Customs declaration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfOriginLowValueDocumentRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CountryOfOriginLowValueDocumentRequested { get; set; }

        /// <summary>
        /// Specify the shipper role for Customs declaration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customsRole", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaLowValueStatementDetailCustomsRole CustomsRole { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are label specification details includes the image type, printer format, and label stock for label. Can also specify specific details such as doc-tab content, regulatory labels, and masking data on the label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelSpecification
    {
        /// <summary>
        /// Specify the label Format Type.&lt;br&gt;&lt;a onclick='loadDocReference("labelstocktypes")'&gt;click here to see label format types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelFormatType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationLabelFormatType LabelFormatType { get; set; }

        /// <summary>
        /// This is the order of the Shipping label/documents to be generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationLabelOrder LabelOrder { get; set; }

        [Newtonsoft.Json.JsonProperty("customerSpecifiedDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerSpecifiedLabelDetail CustomerSpecifiedDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("printedLabelOrigin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress PrintedLabelOrigin { get; set; }

        /// <summary>
        /// Indicate the label stock type used. &lt;br&gt;&lt;a onclick='loadDocReference("labelstocktypes")'&gt;click here to see label format types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelStockType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationLabelStockType LabelStockType { get; set; }

        /// <summary>
        /// This is applicable only to documents produced on thermal printers with roll stock.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelRotation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationLabelRotation LabelRotation { get; set; }

        /// <summary>
        /// Specify the image format used for a shipping document.&lt;br&gt;&lt;a onclick='loadDocReference("labelstocktypes")'&gt;click here to see label format types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationImageType ImageType { get; set; }

        /// <summary>
        /// This is applicable only to documents produced on thermal printers with roll stock.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelPrintingOrientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationLabelPrintingOrientation LabelPrintingOrientation { get; set; }

        /// <summary>
        /// Specify whether or not the return deposition is needed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnedDispositionDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReturnedDispositionDetail { get; set; }

        /// <summary>
        /// Specifies the image resolution in DPI (Dots Per Inch). Valid values are 203 &amp; 300. If not provided or for any other value, system will default it to 203.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Resolution { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This object allows the control of label content for customization.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSpecifiedLabelDetail
    {
        /// <summary>
        /// Specify which data/sections on the label to be masked.&lt;br&gt;Note: &lt;ul&gt;&lt;li&gt;SHIPPER_INFORMATION &amp;ndash; This is used for Third Party Consignee, Intra-UK shipments.&lt;/li&gt;&lt;li&gt;TOTAL_WEIGHT &amp;ndash; This replaces the Total weight with Actual Weight in Master label and AWB copies.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maskedData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MaskedData> MaskedData { get; set; }

        /// <summary>
        /// Specify how the regulatory details to be provided on the labels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regulatoryLabels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegulatoryLabelContentDetail> RegulatoryLabels { get; set; }

        /// <summary>
        /// Specify how the additional details to be provided on the labels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalLabels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalLabelsDetail> AdditionalLabels { get; set; }

        [Newtonsoft.Json.JsonProperty("docTabContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocTabContent DocTabContent { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegulatoryLabelContentDetail
    {
        /// <summary>
        /// Specify the regulatory content preference to be displayed on the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generationOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegulatoryLabelContentDetailGenerationOptions GenerationOptions { get; set; }

        /// <summary>
        /// Specify the type of regulatory content to be added on the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegulatoryLabelContentDetailType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalLabelsDetail
    {
        /// <summary>
        /// Specify the type of additional  details to be added on the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdditionalLabelsDetailType Type { get; set; }

        /// <summary>
        /// Specifies the count of label to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies details of doc tab content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocTabContent
    {
        /// <summary>
        /// Indicates the content type of the doc tab.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docTabContentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocTabContentType DocTabContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("zone001", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocTabContentZone Zone001 { get; set; }

        [Newtonsoft.Json.JsonProperty("barcoded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocTabContentBarcoded Barcoded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the doc tab zone specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocTabZoneSpecification
    {
        /// <summary>
        /// It is a non-negative integer that represents the portion of doc-tab in a label.&lt;br&gt;Example: 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ZoneNumber { get; set; }

        /// <summary>
        /// Indicates the parameter name in the header for the doc tab zone.&lt;br&gt;Example:  WHT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Header { get; set; }

        /// <summary>
        /// Indicate the path request/reply element to be printed on doc tab.&lt;br&gt;Example: &lt;ul&gt;&lt;li&gt; REQUEST/PACKAGE/weight/Value&lt;/li&gt;&lt;li&gt; REQUEST/PACKAGE/weight/Value&lt;/li&gt;&lt;li&gt; REQUEST/PACKAGE/InsuredValue/Amount&lt;/li&gt;&lt;li&gt; REQUEST/SHIPMENT/SpecialServicesRequested/CodDetail/CodCollectionAmount/Amount&lt;/li&gt;&lt;li&gt;REQUEST/SHIPMENT/Shipper/Address/StreetLines[1]CLIENT/MeterNumber&lt;/li&gt;&lt;li&gt; TRANSACTION/CustomerTransactionId&lt;/li&gt;&lt;li&gt; REQUEST/SHIPMENT/TotalWeight/Value&lt;/li&gt;&lt;li&gt; REQUEST/SHIPMENT/ShipTimestamp&lt;/li&gt;&lt;li&gt; REQUEST/SHIPMENT/Recipient/Contact/PersonName&lt;/li&gt;&lt;li&gt; REPLY/SHIPMENT/OperationalDetail/DeliveryDate&lt;/li&gt;&lt;li&gt;  REPLY/SHIPMENT/RATES/ACTUAL/totalBaseCharge/Amount&lt;/li&gt;&lt;li&gt; REPLY/SHIPMENT/RATES/ACTUAL/totalFreightDiscounts/Amount&lt;/li&gt;&lt;li&gt;  REPLY/SHIPMENT/RATES/ACTUAL/totalSurcharges/Amount&lt;/li&gt;&lt;li&gt; REPLY/SHIPMENT/RATES/ACTUAL/totalNetCharge/Amount&lt;/li&gt;&lt;li&gt; REPLY/SHIPMENT/RATES/PAYOR_ACCOUNT_PACKAGE/totalSurcharges/Amount&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataField", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataField { get; set; }

        /// <summary>
        /// Indicates the actual data to be printed in the label&lt;br&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("literalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LiteralValue { get; set; }

        /// <summary>
        /// Indicates the justification format for the string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("justification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocTabZoneSpecificationJustification Justification { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// It is a doc tab content type which is in barcoded format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocTabContentBarcoded
    {
        /// <summary>
        /// Indicates the type of barcode symbology used on FedEx documents and labels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbology", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocTabContentBarcodedSymbology Symbology { get; set; }

        [Newtonsoft.Json.JsonProperty("specification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocTabZoneSpecification Specification { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to provide all data required for additional (non-label) shipping documents to be produced.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLShippingDocumentSpecification
    {
        [Newtonsoft.Json.JsonProperty("generalAgencyAgreementDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeneralAgencyAgreementDetail GeneralAgencyAgreementDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("op900Detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Op900Detail Op900Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("usmcaCertificationOfOriginDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsmcaCertificationOfOriginDetail UsmcaCertificationOfOriginDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("usmcaCommercialInvoiceCertificationOfOriginDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsmcaCommercialInvoiceCertificationOfOriginDetail UsmcaCommercialInvoiceCertificationOfOriginDetail { get; set; }

        /// <summary>
        /// Indicates the types of shipping documents requested.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingDocumentTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ShippingDocumentTypes> ShippingDocumentTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("certificateOfOrigin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateOfOriginDetail CertificateOfOrigin { get; set; }

        [Newtonsoft.Json.JsonProperty("commercialInvoiceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommercialInvoiceDetail CommercialInvoiceDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("freightAddressLabelDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FreightAddressLabelDetail FreightAddressLabelDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("freightBillOfLadingDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FreightBillOfLadingDetail FreightBillOfLadingDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify details to generate general agency agreement detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeneralAgencyAgreementDetail
    {
        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat DocumentFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the shipping document format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingDocumentFormat
    {
        /// <summary>
        /// Indicates whether or not to provide the instructions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provideInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ProvideInstructions { get; set; }

        [Newtonsoft.Json.JsonProperty("optionsRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentFormatOptionsRequested OptionsRequested { get; set; }

        /// <summary>
        /// Indicate the used label stock type. Note to list the correct type of paper for the freight address label option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stockType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingDocumentFormatStockType StockType { get; set; }

        /// <summary>
        /// Specifies how to create, organize, and return the document
        /// <br/>
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dispositions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShippingDocumentDispositionDetail> Dispositions { get; set; }

        /// <summary>
        /// These are locale details.&lt;br&gt;example: 'en_US'&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;click here to see Locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        /// <summary>
        /// Specify the image format used for a shipping document.&lt;br&gt;&lt;a onclick='loadDocReference("labelstocktypes")'&gt;click here to see label format types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingDocumentFormatDocType DocType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the requested options for document format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentFormatOptionsRequested
    {
        /// <summary>
        /// Indicates the format options. SUPPRESS_ADDITIONAL_LANGUAGES value will suppress English language if another language is specified in the language code field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options> Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are document diposition details. Each occurrence of this class specifies a particular way in which a kind of shipping document is to be produced and provided.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingDocumentDispositionDetail
    {
        [Newtonsoft.Json.JsonProperty("eMailDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentEmailDetail EMailDetail { get; set; }

        /// <summary>
        /// Specify how to create and return the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dispositionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingDocumentDispositionDetailDispositionType DispositionType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies how to e-mail shipping documents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingDocumentEmailDetail
    {
        /// <summary>
        /// Indicates the shipping document email recipients.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eMailRecipients", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShippingDocumentEmailRecipient> EMailRecipients { get; set; } = new System.Collections.ObjectModel.Collection<ShippingDocumentEmailRecipient>();

        /// <summary>
        /// These are locale details.&lt;br&gt;Example: 'en_US'&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;click here to see locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        /// <summary>
        /// Identifies the convention by which documents are to be grouped as email attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grouping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingDocumentEmailDetailGrouping Grouping { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingDocumentEmailRecipient
    {
        /// <summary>
        /// Specifies the email address.&lt;br&gt; Example: email@fedex.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Specify the email notification recipient type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingDocumentEmailRecipientRecipientType RecipientType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify details to generate the OP-900 document for hazardous material packages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Op900Detail
    {
        /// <summary>
        /// Specify the use and identification of supplied images to be used on document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerImageUsages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerImageUsage> CustomerImageUsages { get; set; }

        /// <summary>
        /// Indicates the name to be printed as signature on the document instead of (or in addition to) a signature image.&lt;br&gt;Example: John Hill
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignatureName { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat DocumentFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the usse and identification of supplied images to be used on this document.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerImageUsage
    {
        /// <summary>
        /// Specify the Image ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerImageUsageId Id { get; set; }

        /// <summary>
        /// Specify document image type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerImageUsageType Type { get; set; }

        /// <summary>
        /// Specify the provided document image type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("providedImageType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerImageUsageProvidedImageType ProvidedImageType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The instructions indicating how to print the USMCA Certificate of Origin (e.g. whether or not to include the instructions, image type, etc ...).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsmcaCertificationOfOriginDetail
    {
        /// <summary>
        /// Specifies the usage and identification of customer supplied images to be used on this document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerImageUsages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerImageUsage> CustomerImageUsages { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat DocumentFormat { get; set; }

        /// <summary>
        /// This is certifier specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certifierSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCertificationOfOriginDetailCertifierSpecification CertifierSpecification { get; set; }

        /// <summary>
        /// This is importer specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importerSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCertificationOfOriginDetailImporterSpecification ImporterSpecification { get; set; }

        /// <summary>
        /// This is producer specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("producerSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCertificationOfOriginDetailProducerSpecification ProducerSpecification { get; set; }

        [Newtonsoft.Json.JsonProperty("producer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_3 Producer { get; set; }

        [Newtonsoft.Json.JsonProperty("blanketPeriod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RetrieveDateRange BlanketPeriod { get; set; }

        /// <summary>
        /// Specify the job title of the certifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certifierJobTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertifierJobTitle { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The instructions indicating commercial invoice certification of origin.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsmcaCommercialInvoiceCertificationOfOriginDetail
    {
        /// <summary>
        /// Specifies the usage and identification of customer supplied images to be used on this document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerImageUsages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerImageUsage> CustomerImageUsages { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat DocumentFormat { get; set; }

        /// <summary>
        /// This is certifier specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certifierSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCommercialInvoiceCertificationOfOriginDetailCertifierSpecification CertifierSpecification { get; set; }

        /// <summary>
        /// This is importer specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importerSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCommercialInvoiceCertificationOfOriginDetailImporterSpecification ImporterSpecification { get; set; }

        /// <summary>
        /// This is producer specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("producerSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCommercialInvoiceCertificationOfOriginDetailProducerSpecification ProducerSpecification { get; set; }

        [Newtonsoft.Json.JsonProperty("producer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_3 Producer { get; set; }

        /// <summary>
        /// Specify the job title of the certifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certifierJobTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertifierJobTitle { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The instructions indicating how to print the Certificate of Origin ( e.g. whether or not to include the instructions, image type, etc ...)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateOfOriginDetail
    {
        /// <summary>
        /// Specifies the usage and identification of customer supplied images to be used on this document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerImageUsages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerImageUsage> CustomerImageUsages { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat DocumentFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The instructions indicating how to print the Commercial Invoice( e.g. image type) Specifies characteristics of a shipping document to be produced.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommercialInvoiceDetail
    {
        /// <summary>
        /// Specifies the usage and identification of customer supplied images to be used on this document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerImageUsages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerImageUsage> CustomerImageUsages { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat DocumentFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are the data required to produce the Freight handling-unit-level address labels. Note that the number of UNIQUE labels (the N as in 1 of N, 2 of N, etc.) is determined by total handling units.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightAddressLabelDetail
    {
        /// <summary>
        /// Indicates the number of copies to be produced for each unique label.&lt;br&gt;Example: 25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Copies { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat DocumentFormat { get; set; }

        /// <summary>
        /// Specifies the quadrant of the page on which the label printing will start.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startingPosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightAddressLabelDetailStartingPosition StartingPosition { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies Freight Bill Of Lading as the shipping document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightBillOfLadingDetail
    {
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat Format { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the tracking details for the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingId
    {
        /// <summary>
        /// This is FedEx tracking Identifier associated with the package.&lt;br&gt;Example: 8600
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormId { get; set; }

        /// <summary>
        /// Specify the FedEx transportation type. &lt;br&gt;Example: EXPRESS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingIdType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingIdType { get; set; }

        /// <summary>
        /// Specify the USPS tracking Identifier associated with FedEx SmartPost shipment.&lt;br&gt;Example: 92
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uspsApplicationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UspsApplicationId { get; set; }

        /// <summary>
        /// This is a number associated with a package that is used to track it. &lt;br&gt;Example: 49XXX0000XXX20032835
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightRequestedPackageLineItem
    {
        /// <summary>
        /// Optional. Used only with individual packages as a unique identifier of each requested package. Will be adjusted at the shipment level as pieces are added.    
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SequenceNumber { get; set; }

        /// <summary>
        /// This is a sub package type for the package. &lt;br&gt;&lt;a onclick='loadDocReference("subpackagetypes")'&gt;Click here to see Sub-Packaging Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subPackagingType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubPackagingType { get; set; }

        /// <summary>
        /// These are additional customer reference data.&lt;br&gt;Note: The groupPackageCount must be specified to retrieve customer references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerReference> CustomerReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money DeclaredValue { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        /// <summary>
        /// Required. &lt;br&gt;The dimensions of the package; length, width &amp; height.  All three dimensions must be indicated. Dimensions are required with all FedEx Freight Services like "INTERNATIONAL_PRIORITY_FREIGHT" and "INTERNATIONAL_ECONOMY_FREIGHT"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Specification of handling-unit packaging for this commodity or class line.&lt;br&gt;Example: class line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("physicalPackaging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalPackaging { get; set; }

        /// <summary>
        /// Used only with package groups as a count of packages within a group of identical packages. The package count added to existing package count on the shipment cannot exceed Open Ship package limit&lt;br&gt;Example: 25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupPackageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GroupPackageCount { get; set; }

        /// <summary>
        /// Conditional&lt;br&gt;This is required for intra-UAE. Optional for intra-EU.PackageOption, ServiceOption ignore this field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemDescriptionForClearance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDescriptionForClearance { get; set; }

        /// <summary>
        /// Use this object to specify package content details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentRecord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentRecord> ContentRecord { get; set; }

        /// <summary>
        /// Required for Email Label return shipments.&lt;br&gt; This is the item description for the package.&lt;br&gt;Example: item description for the package
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("variableHandlingChargeDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariableHandlingChargeDetail VariableHandlingChargeDetail { get; set; }

        /// <summary>
        /// Indicates the associated freight line item detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associatedFreightLineItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AssociatedFreightLineItemDetail> AssociatedFreightLineItems { get; set; } = new System.Collections.ObjectModel.Collection<AssociatedFreightLineItemDetail>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The account number associated with the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipperAccountNumber
    {
        /// <summary>
        /// The account number value. Maximum length is 9 .&lt;br&gt;Example: Your account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Wrapper class for LTLFreightShipmentOutput. It holds transactionId and output.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SHPCResponseVO
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5xxxxx1492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you to match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LTLFreightShipmentOutputVO Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response elements received when a Freight LTL Shipment is created.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLFreightShipmentOutputVO
    {
        /// <summary>
        /// The shipping transaction details, such as master tracking number, service type, and ship timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionShipments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LTLTransactionShipmentOutputVO> TransactionShipments { get; set; }

        /// <summary>
        /// The alerts received when a freightShipment is processed. This includes the alert code, alert type, and alert message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies shipping transaction output details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LTLTransactionShipmentOutputVO
    {
        /// <summary>
        /// Indicate the FedEx serviceType used for this shipment. The results will be filtered by the serviceType value indicated.&lt;br&gt;Example: FEDEX_FREIGHT_ECONOMY&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;click here to see Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceType { get; set; }

        /// <summary>
        /// This is the shipment date. Default value is current date in case the date is not provided or a past date is provided.&lt;br&gt;Format [YYYY-MM-DD].&lt;br&gt;Example: 2019-10-14
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDatestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipDatestamp { get; set; }

        /// <summary>
        /// Indicates Service Category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceCategory { get; set; }

        /// <summary>
        /// These are shipping document details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LabelResponseVO> ShipmentDocuments { get; set; }

        /// <summary>
        /// These are pieces information received in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pieceResponses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PieceResponse> PieceResponses { get; set; }

        /// <summary>
        /// This is the service name associated with the shipment.&lt;br&gt;Example: FedEx Freight® Economy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        /// <summary>
        /// These are alert details received in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        [Newtonsoft.Json.JsonProperty("completedShipmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedShipmentDetail CompletedShipmentDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentAdvisoryDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentAdvisoryDetails ShipmentAdvisoryDetails { get; set; }

        /// <summary>
        /// This is a master tracking number for the shipment (must be unique for stand-alone open shipments, or unique within consolidation if consolidation key is provided).&lt;br&gt;Example: 794953535000
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MasterTrackingNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are shipping document/label specific information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelResponseVO
    {
        /// <summary>
        /// This is the content key for the document/label.&lt;br&gt;Example: content key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentKey { get; set; }

        /// <summary>
        /// These are the number of copies to print for the specific document type.&lt;br&gt;Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copiesToPrint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CopiesToPrint { get; set; }

        /// <summary>
        /// Indicates the type of document/label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelResponseVOContentType ContentType { get; set; }

        /// <summary>
        /// This is a tracking number for the package. &lt;br&gt;Example: 49XXX0000XXX20032835&lt;br&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// This is the document type.&lt;br&gt;Example: PDF
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocType { get; set; }

        /// <summary>
        /// These are alerts received in the label response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        /// <summary>
        /// Specifies if the document is encoded.&lt;br&gt;Example: encoded label
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodedLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodedLabel { get; set; }

        /// <summary>
        /// The URL of the shipping document/label&lt;br&gt;Example: https://.../document/v2/document/retrieve/SH,794816968200_Merge/isLabel=true&amp;autoPrint=false&lt;br&gt;&lt;br&gt;&lt;i&gt;Note: The URL once created will be active for 24 hours.&lt;/i&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Piece Response information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PieceResponse
    {
        /// <summary>
        /// Indicates the net charges amount.&lt;br&gt;Example: 21.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netChargeAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetChargeAmount { get; set; }

        /// <summary>
        /// Indicates data received that governs data payload language/translations. The TransactionDetail from the request is echoed back to the caller in the corresponding reply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionDetailVO> TransactionDetails { get; set; }

        /// <summary>
        /// These are package documents returned in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LabelResponseVO> PackageDocuments { get; set; }

        /// <summary>
        /// Indicates the acceptance tracking number.&lt;br&gt;Example: 7949XXXXX5000
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptanceTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcceptanceTrackingNumber { get; set; }

        /// <summary>
        /// Indicates the service category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PieceResponseServiceCategory ServiceCategory { get; set; }

        /// <summary>
        /// Indicates total charges applicable to the customer.&lt;br&gt;Example: listCustomerTotalCharge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listCustomerTotalCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListCustomerTotalCharge { get; set; }

        /// <summary>
        /// Indicates delivery date with timestamp.&lt;br&gt;Example: 2012-09-23
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryTimestamp { get; set; }

        /// <summary>
        /// Indicates the type of the tracking identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingIdType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingIdType { get; set; }

        /// <summary>
        /// These are additional charges or discounts.&lt;br&gt;Example: 621.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalChargesDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AdditionalChargesDiscount { get; set; }

        /// <summary>
        /// Indicates the net List rate amount.&lt;br&gt;Example: 1.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netListRateAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetListRateAmount { get; set; }

        /// <summary>
        /// Specifies the base rate amount.&lt;br&gt;Example: 321.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseRateAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double BaseRateAmount { get; set; }

        /// <summary>
        /// Indicates package sequence number.&lt;br&gt;Example: 215
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageSequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PackageSequenceNumber { get; set; }

        /// <summary>
        /// Specifies the net discount amount.&lt;br&gt;Example: 121.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netDiscountAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetDiscountAmount { get; set; }

        /// <summary>
        /// This is a master tracking number for the shipment (must be unique for stand-alone open shipments, or unique within consolidation if consolidation key is provided).&lt;br&gt;Example: 794XXXXX5000
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MasterTrackingNumber { get; set; }

        /// <summary>
        /// Indicates acceptance type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptanceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcceptanceType { get; set; }

        /// <summary>
        /// This is a tracking number associated with this package. &lt;br&gt;Example: 49XXX0000XXX20032835
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Returns true if the responses are successful otherwise false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Successful { get; set; }

        /// <summary>
        /// These are additional customer reference data.&lt;br&gt;Note: The groupPackageCount must be specified to retrieve customer references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerReference> CustomerReferences { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionDetailVO
    {
        /// <summary>
        /// Includes data returned which governs data payload language/translations. The TransactionDetail from the request is echoed back to the caller in the corresponding reply.&lt;br&gt;Example: transactionDetails
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionDetails { get; set; }

        /// <summary>
        /// This element has a unique identifier added in your request, helps you match the request to the reply. Maximum of 40 characters allowed.&lt;br&gt;Example: XXXX_XXX123XXXXX.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Returns the result of processing the desired package as a single-package shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedShipmentDetail
    {
        /// <summary>
        /// Indicates the completed package details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completedPackageDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompletedPackageDetail> CompletedPackageDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("operationalDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentOperationalDetail OperationalDetail { get; set; }

        /// <summary>
        /// Specifies which carrier should be included.&lt;br&gt;Example: FDXE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierCode { get; set; }

        [Newtonsoft.Json.JsonProperty("completedHoldAtLocationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedHoldAtLocationDetail CompletedHoldAtLocationDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("completedEtdDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedEtdDetail CompletedEtdDetail { get; set; }

        /// <summary>
        /// Specifies packaging description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackagingDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("masterTrackingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingId MasterTrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceDescription ServiceDescription { get; set; }

        /// <summary>
        /// Indicates whether or not this is an intra-U.S. shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usDomestic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UsDomestic { get; set; }

        [Newtonsoft.Json.JsonProperty("hazardousShipmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedHazardousShipmentDetail HazardousShipmentDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentRating ShipmentRating { get; set; }

        [Newtonsoft.Json.JsonProperty("documentRequirements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentRequirementsDetail DocumentRequirements { get; set; }

        /// <summary>
        /// For US export shipments requiring an EEI, enter the ITN number received from AES when you filed your shipment or the FTR (Foreign Trade Regulations) exemption number.The proper format for an ITN number is AES XYYYYMMDDNNNNNN where YYYYMMDD is date and NNNNNN are numbers generated by the AES.&lt;br&gt; Example: AESX20220714987654&lt;br&gt;Note: The ITN or FTR exemption number you submit in the ship request prints on the international shipping label.&lt;br&gt;&lt;br&gt;For CA export shipments,it can be Proof of report number(15-32 alphanumeric) ,Summary proof of report number(7-32 alphanumeric) or Exemption number(2 digit) based on the selected b13AFilingOption.&lt;br&gt;Example: 98765432107654321(POR number), 7654321(Summary POR number) and 02(Exemption number).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportComplianceStatement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExportComplianceStatement { get; set; }

        [Newtonsoft.Json.JsonProperty("accessDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PendingShipmentAccessDetail AccessDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedPackageDetail
    {
        /// <summary>
        /// This is package sequence number. No negative value or decimals are allowed.&lt;br&gt;Example: 256
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SequenceNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("operationalDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageOperationalDetail OperationalDetail { get; set; }

        /// <summary>
        /// It specifies the signature option applied, to allow cases in which the value requested conflicted with other service features in the shipment. &lt;br&gt;Example: DIRECT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignatureOption { get; set; }

        /// <summary>
        /// Tracking details for the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TrackingId> TrackingIds { get; set; }

        /// <summary>
        /// This is group shipment number. Used with request containing PACKAGE_GROUPS, to identify which group of identical packages was used to produce a reply item.&lt;br&gt;Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GroupNumber { get; set; }

        /// <summary>
        /// Indicates the oversize classification.&lt;br&gt;Example: OVERSIZE_1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oversizeClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OversizeClass { get; set; }

        [Newtonsoft.Json.JsonProperty("packageRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageRating PackageRating { get; set; }

        /// <summary>
        /// Descriptive data required for a FedEx shipment containing dry ice. Includes weight and units. This element is required when SpecialServiceType DRY_ICE is present in the SpecialServiceTypes collection at the package level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dryIceWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight DryIceWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("hazardousPackageDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedHazardousPackageDetail HazardousPackageDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Package-level data required for labeling and/or movement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageOperationalDetail
    {
        /// <summary>
        /// This is human-readable astra handling text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraHandlingText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AstraHandlingText { get; set; }

        [Newtonsoft.Json.JsonProperty("barcodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageBarcodes Barcodes { get; set; }

        /// <summary>
        /// These are operational instruction such as Ground Information printed on a given area of the label, one-dimensional barcode with only x-axis that contains the details of the shipment in encrypted form, SECURED or UNSECURED. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationalInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OperationalInstructions> OperationalInstructions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are package barcode details. Each instance of this data type represents the set of barcodes (of all types) which are associated with a specific package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageBarcodes
    {
        /// <summary>
        /// This is binary-style barcodes for the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("binaryBarcodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BinaryBarcode> BinaryBarcodes { get; set; }

        /// <summary>
        /// This is string-style barcodes for the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stringBarcodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StringBarcode> StringBarcodes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Each instance of this data type represents a barcode whose content must be represented as binary data (i.e. not ASCII text).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BinaryBarcode
    {
        /// <summary>
        /// This is the type of barcode data available in this instance.&lt;br&gt; Example: COMMON-2D
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// This is the value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Each instance of this data type represents a barcode whose content must be represented as ASCII text (i.e. not binary data).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StringBarcode
    {
        /// <summary>
        /// This is the type of barcode data in this instance. &lt;br&gt;Valid values:&lt;ul&gt;&lt;li&gt;ADDRESS - Represents the recipient address.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// This is the value.&lt;br&gt;Example: 1010062512241535917900794953544894
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationalInstructions
    {
        /// <summary>
        /// Specifies the number of operational instructions returned for this shipment.&lt;br&gt;Example: 17
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Number { get; set; }

        /// <summary>
        /// This is an operational instruction printed or available on the shipping document.&lt;br&gt;Example: SECURED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This class groups together all package-level rate data for a single package (across all rate types) as part of the response to a shipping request, which groups shipment-level data together and groups package-level data by package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageRating
    {
        /// <summary>
        /// This is the difference between the list and account net charge.&lt;br&gt;Example: 0.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveNetDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double EffectiveNetDiscount { get; set; }

        /// <summary>
        /// This is the actual rate type. It identifies which entry in the following array is considered as presenting the actual rates for the package.&lt;br&gt;Example: PAYOR_ACCOUNT_PACKAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actualRateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActualRateType { get; set; }

        /// <summary>
        /// Data for a package's rates, as calculated per a specific rate type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageRateDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PackageRateDetail_2> PackageRateDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Complete package-level hazardous commodity information for a single package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedHazardousPackageDetail
    {
        /// <summary>
        /// Specifies the hazardous package regulation type.&lt;br&gt;Example: IATA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regulation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Regulation { get; set; }

        /// <summary>
        /// Specifies the hazardous package accessibility.&lt;br&gt;Example: ACCESSIBLE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Accessibility { get; set; }

        /// <summary>
        /// Specifies the label type for Hhardous package.&lt;br&gt;Example: II_YELLOW
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LabelType { get; set; }

        /// <summary>
        /// Indicates one or more approved containers used to pack dangerous goods commodities. This does not describe any individual inner receptacles that may be within this container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("containers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValidatedHazardousContainer> Containers { get; set; }

        /// <summary>
        /// When TRUE-indicates that the package can be transported only on a cargo aircraft.&lt;br&gt;Example: true
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cargoAircraftOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CargoAircraftOnly { get; set; }

        /// <summary>
        /// A unique reference id that matches the package to a package configuration. This is populated if the client provided a package configuration for several packages that have the exact same dangerous goods content.&lt;br&gt;Example: 123456
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Specifies the maximum radiation level from the package (measured in microSieverts per hour at a distance of one meter from the external surface of the package, divided by 10).&lt;br&gt;Example: 2.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radioactiveTransportIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RadioactiveTransportIndex { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the details of a container used to package dangerous goods commodities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidatedHazardousContainer
    {
        /// <summary>
        /// Indicates that the quantity of the dangerous goods packaged is permissible for shipping. This is used to ensure that the dangerous goods commodities do not exceed the net quantity per package restrictions.&lt;br&gt;Example: 2.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qvalue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Qvalue { get; set; }

        /// <summary>
        /// Indicates the details of the hazardous commodities in the completed package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardousCommodities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValidatedHazardousCommodityContent> HazardousCommodities { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These the details on the kind and quantity of an individual hazardous commodity in a package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidatedHazardousCommodityContent
    {
        /// <summary>
        /// Indicates hazardous commodity quantity details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityQuantityDetail Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityContent Options { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValidatedHazardousCommodityDescription Description { get; set; }

        [Newtonsoft.Json.JsonProperty("netExplosiveDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetExplosiveDetail NetExplosiveDetail { get; set; }

        /// <summary>
        /// The mass points are a calculation used by ADR regulations for measuring the risk of a particular hazardous commodity.&lt;br&gt;Example: 2.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("massPoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MassPoints { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identifies and describes an individual hazardous commodity. For 201001 load, this is based on data from the FedEx Ground Hazardous Materials Shipping Guide.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidatedHazardousCommodityDescription
    {
        /// <summary>
        /// In conjunction with the regulatory identifier, this field uniquely identifies a specific hazardous materials commodity.&lt;br&gt;Example: 876
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Specifies Packing Instructions.&lt;br&gt;Example: packingInstructions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackingInstructions { get; set; }

        /// <summary>
        /// Specifies subsidiary Classes.&lt;br&gt;Example:["Subsidiary Classes"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subsidiaryClasses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SubsidiaryClasses { get; set; }

        /// <summary>
        /// Specifies the text for the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LabelText { get; set; }

        /// <summary>
        /// There are five categories of tunnel categorization with A representing the least restrictive and E as the most restrictive. Category A, as the least restrictive, will not be sign-posted. Category E, the most restrictive, only allows the passage of UN2919, UN3291, UN3331, UN3359 and UN3373.&lt;br&gt;Example: UN2919
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tunnelRestrictionCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TunnelRestrictionCode { get; set; }

        /// <summary>
        /// Specifies Special Provisions if any.&lt;br&gt;Example: specialProvisions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialProvisions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecialProvisions { get; set; }

        /// <summary>
        /// Fully-expanded descriptive text for a hazardous commodity.&lt;br&gt;Example: properShippingNameAndDescription
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properShippingNameAndDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProperShippingNameAndDescription { get; set; }

        /// <summary>
        /// Specifies Technical Name.&lt;br&gt;Example: technicalName
        /// </summary>
        [Newtonsoft.Json.JsonProperty("technicalName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TechnicalName { get; set; }

        /// <summary>
        /// Specifies Symbols.&lt;br&gt;Example: symbols
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbols", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbols { get; set; }

        /// <summary>
        /// Information related to quantity limitations and operator or state variations as may be applicable to the dangerous goods commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Authorization { get; set; }

        /// <summary>
        /// Specifies attributes.&lt;br&gt;Example: ["attributes"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Attributes { get; set; }

        /// <summary>
        /// Specifies the Identification.&lt;br&gt;Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Specifies packing group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackingGroup { get; set; }

        /// <summary>
        /// Specifies proper shipping name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properShippingName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProperShippingName { get; set; }

        /// <summary>
        /// Specifies hazard class.&lt;br&gt;Example: Hazard Class
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HazardClass { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the total mass of the contained explosive substances, without the mass of any casings, bullets, shells, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetExplosiveDetail
    {
        /// <summary>
        /// Specifies amount.&lt;br&gt;Example: 10.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies net explosive units.&lt;br&gt;Example: units
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }

        /// <summary>
        /// Specifies net explosive  classification type.&lt;br&gt;Example: NET_EXPLOSIVE_WEIGHT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the shipment level operational information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentOperationalDetail
    {
        /// <summary>
        /// Indicates the origin service area.&lt;br&gt;Example: A1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originServiceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginServiceArea { get; set; }

        /// <summary>
        /// Indicates the service code.&lt;br&gt;Example: 010
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceCode { get; set; }

        /// <summary>
        /// Indicates the airport identifier.&lt;br&gt;Example: DFW
        /// </summary>
        [Newtonsoft.Json.JsonProperty("airportId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AirportId { get; set; }

        /// <summary>
        /// Specifies the postal code.&lt;br&gt;Example: 38010&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Indicates standard carrier alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scac", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scac { get; set; }

        /// <summary>
        /// Specifies expected/estimated day of week of the delivery.&lt;br&gt;Example: TUE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryDay { get; set; }

        /// <summary>
        /// This is the origin Location identifier.&lt;br&gt;Example: 678
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginLocationId { get; set; }

        /// <summary>
        /// Indicate the two-letter country code.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Specifies astra description.&lt;br&gt;Example: SMART POST
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AstraDescription { get; set; }

        /// <summary>
        /// Specifies origin location number.&lt;br&gt;Example: 243
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originLocationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OriginLocationNumber { get; set; }

        /// <summary>
        /// Specifies delivery date for the shipment. The format is [YYYY-MM-DD]&lt;br&gt;Example: 2001-04-05
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryDate { get; set; }

        /// <summary>
        /// FedEx Ground delivery features for which this shipment may be eligible.&lt;br&gt;Example: ["deliveryEligibilities"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryEligibilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DeliveryEligibilities { get; set; }

        /// <summary>
        /// Indicates that this shipment is not eligible for money back guarantee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ineligibleForMoneyBackGuarantee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IneligibleForMoneyBackGuarantee { get; set; }

        /// <summary>
        /// Maximum expected transit time.&lt;br&gt;Example: SEVEN_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumTransitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaximumTransitTime { get; set; }

        /// <summary>
        /// This is the state or province code of the shipment destination location, and is not necessarily the same as the postal state.&lt;br&gt;Example: GA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;click here to see State or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationStateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationLocationStateOrProvinceCode { get; set; }

        /// <summary>
        /// Text describing planned delivery.&lt;br&gt;Example: TUE - 15 OCT 10:30A
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraPlannedServiceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AstraPlannedServiceLevel { get; set; }

        /// <summary>
        /// Specifies the FedEx Destination Location Identifier.&lt;br&gt;Example: DALA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationLocationId { get; set; }

        /// <summary>
        /// Standard transit time per origin, destination, and service.&lt;br&gt;Example: TWO_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitTime { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2&lt;br&gt;&lt;br&gt;Example: CA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;click here to see State or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// Indicates destination location number.&lt;br&gt;Example: 876
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DestinationLocationNumber { get; set; }

        /// <summary>
        /// Indicates packaging code.&lt;br&gt;Example: 03
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackagingCode { get; set; }

        /// <summary>
        /// This is committed date of delivery.&lt;br&gt;Example: 2019-10-15
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommitDate { get; set; }

        /// <summary>
        /// This is delivery time, as published in Service Guide.&lt;br&gt;Example: 10:30A
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publishedDeliveryTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublishedDeliveryTime { get; set; }

        /// <summary>
        /// This is ursa suffix code.&lt;br&gt;Example: Ga
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ursaSuffixCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrsaSuffixCode { get; set; }

        /// <summary>
        /// This is ursa prefix code.&lt;br&gt;Example: XH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ursaPrefixCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrsaPrefixCode { get; set; }

        /// <summary>
        /// Specifies destination service area.&lt;br&gt;Example: A1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationServiceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationServiceArea { get; set; }

        /// <summary>
        /// Committed day of week of delivery.&lt;br&gt;Example: TUE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommitDay { get; set; }

        /// <summary>
        /// Transit time based on customer eligibility.&lt;br&gt;Example: ONE_DAY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customTransitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomTransitTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is default holding location information when HOLD_AT_LOCATION special service is requested and the client does not specify the hold location address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedHoldAtLocationDetail
    {
        /// <summary>
        /// Indicates the type of the FedEx holding location &lt;br&gt;Example: FEDEX_STAFFED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holdingLocationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoldingLocationType { get; set; }

        /// <summary>
        /// Indicate the physical address of the FedEx holding location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holdingLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JustContactAndAddress HoldingLocation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JustContactAndAddress
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address_2 Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact_2 Contact { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are completed ETD details when ELECTRONIC_TRADE_DOCUMENTS Special service type is requested
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedEtdDetail
    {
        /// <summary>
        /// Returns the folder id where the documents is uploaded &lt;br&gt; Example: "0b0493e580dc1a1b"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FolderId { get; set; }

        /// <summary>
        /// Returns the type of the document that is being uploaded &lt;br&gt; Example: "COMMERCIAL_INVOICE"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Specify the document upload reference details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uploadDocumentReferenceDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UploadDocumentReferenceDetail> UploadDocumentReferenceDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the document upload reference details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UploadDocumentReferenceDetail
    {
        /// <summary>
        /// Specify document type for the uploaded document. It should match with the type of uploaded document associated with documentId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadDocumentReferenceDetailDocumentType DocumentType { get; set; }

        /// <summary>
        /// Specify the reference for the uploaded document.This is for the customer to reference their uploaded docs when they retrieve them. Could be anything, order number, po number, whatever the customer used to tie the document to something they would use.&lt;br&gt;Note: Ensure to supply document references in case of  Pre-Shipment document upload.&lt;/br&gt;&lt;br&gt;Example: Reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentReference { get; set; }

        /// <summary>
        /// Specify additional information about the uploaded document for better understanding.&lt;br&gt;Example: Certificate of Origin is uploaded for country of manufacturing verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// This is the uploaded document ID value.&lt;br&gt;Example: 090927d680038c61
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Completed shipment level hazardous commodity information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedHazardousShipmentDetail
    {
        [Newtonsoft.Json.JsonProperty("hazardousSummaryDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedHazardousSummaryDetail HazardousSummaryDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("adrLicense", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdrLicenseDetail AdrLicense { get; set; }

        [Newtonsoft.Json.JsonProperty("dryIceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentDryIceDetail DryIceDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies Completed Hazardous Summary Detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedHazardousSummaryDetail
    {
        /// <summary>
        /// Specifies the total number of packages containing hazardous commodities in small exceptions.&lt;br&gt;Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("smallQuantityExceptionPackageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SmallQuantityExceptionPackageCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the details around the ADR license required for shipping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdrLicenseDetail
    {
        [Newtonsoft.Json.JsonProperty("licenseOrPermitDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LicenseOrPermitDetail LicenseOrPermitDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This contains the ADR license information, which identifies the license number, the effective date and the expiration date under which the customer is allowed to ship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LicenseOrPermitDetail
    {
        /// <summary>
        /// Specifies license or permit detail number.&lt;br&gt;Example: 12345
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>
        /// Specifies the effective date of the license.&lt;br&gt;The format is [YYYY-MM-DD].&lt;br&gt;Example: 2019-08-09
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Specifies the expiration date of the license.&lt;br&gt;The format is [YYYY-MM-DD].&lt;br&gt;Example: 2019-04-09
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the shipment level totals of dry ice data across all packages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentDryIceDetail
    {
        /// <summary>
        /// Specify total dry ice weight for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight TotalWeight { get; set; } = new Weight();

        /// <summary>
        /// Specifies the package Count for the shipment&lt;br&gt;Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageCount", Required = Newtonsoft.Json.Required.Always)]
        public int PackageCount { get; set; }

        [Newtonsoft.Json.JsonProperty("processingOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentDryIceProcessingOptionsRequested ProcessingOptions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify that dry ice information is only applicable at the shipment level. Package level dry ice information would not apply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentDryIceProcessingOptionsRequested
    {
        /// <summary>
        /// Specifies the options.&lt;br&gt;Example: ["options"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// All shipment-level rating data for this shipment, which may include data for multiple rate types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentRating
    {
        /// <summary>
        /// This rate type identifies which entry in the following array is considered as presenting the "actual" rates for the shipment.&lt;br&gt;Example: PAYOR_LIST_SHIPMENT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actualRateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActualRateType { get; set; }

        /// <summary>
        /// Each element of this field provides shipment-level rate totals for a specific rate type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentRateDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentRateDetail_2> ShipmentRateDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the document requirements detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentRequirementsDetail
    {
        /// <summary>
        /// Indicates the required documents information.&lt;br&gt;Example: ["COMMERCIAL_OR_PRO_FORMA_INVOICE","AIR_WAYBILL"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiredDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RequiredDocuments { get; set; }

        /// <summary>
        /// Indicates the prohibited Documents info.&lt;br&gt;Example: ["CERTIFICATE_OF_ORIGIN "]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prohibitedDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProhibitedDocuments { get; set; }

        /// <summary>
        /// Specifies the generation details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generationDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DocumentGenerationDetail> GenerationDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the document generation detail information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentGenerationDetail
    {
        /// <summary>
        /// Indicates the letterhead requirement type.&lt;br&gt;Example: OPTIONAL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("letterhead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Letterhead { get; set; }

        /// <summary>
        /// Indicates electronic signature requirement type.&lt;br&gt;Example:  OPTIONAL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("electronicSignature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElectronicSignature { get; set; }

        /// <summary>
        /// It is a non-Negative Integer.&lt;br&gt;Example: 3
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumCopiesRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinimumCopiesRequired { get; set; }

        /// <summary>
        /// It is an Enterprise Document Type.&lt;br&gt;Example: COMMERCIAL_INVOICE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This information describes how and when a online email return label shipment may be accessed for completion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PendingShipmentAccessDetail
    {
        /// <summary>
        /// Indicates the details about the users who can access the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessorDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PendingShipmentAccessorDetail> AccessorDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies details for how to access the pending email return label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PendingShipmentAccessorDetail
    {
        /// <summary>
        /// Specifies the accessor password.&lt;br&gt;Example: password
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Specifies the accessor role.&lt;br&gt;Example: role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        /// <summary>
        /// Specifies the URL for the email label.&lt;br&gt;Example: emailLabelUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailLabelUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailLabelUrl { get; set; }

        /// <summary>
        /// Specifies the accessor User ID.&lt;br&gt;Example: userId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are shipment advisory details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentAdvisoryDetails
    {
        [Newtonsoft.Json.JsonProperty("regulatoryAdvisory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegulatoryAdvisoryDetail RegulatoryAdvisory { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the regulatory advisory details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegulatoryAdvisoryDetail
    {
        /// <summary>
        /// Indicates the Commodity clarifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commodityClarifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommodityClarificationDetail> CommodityClarifications { get; set; }

        /// <summary>
        /// It is a regulatory probitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prohibitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegulatoryProhibition> Prohibitions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommodityClarificationDetail
    {
        /// <summary>
        /// This is a index identifying the commodity in the request that resulted in this COMMODITY or DOCUMENT type prohibition.&lt;br&gt;Example: 25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commodityIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CommodityIndex { get; set; }

        /// <summary>
        /// These are suggested commodity details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suggestions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SuggestedCommodityDetail> Suggestions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SuggestedCommodityDetail
    {
        /// <summary>
        /// This is a suggested commodity description.&lt;br&gt;Example: Commodity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Specify the harmonized code.&lt;br&gt;Example: XXX12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("harmonizedCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HarmonizedCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegulatoryProhibition
    {
        /// <summary>
        /// Indicates the derived harmonized code value&lt;br&gt;Example: 01
        /// </summary>
        [Newtonsoft.Json.JsonProperty("derivedHarmonizedCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DerivedHarmonizedCode { get; set; }

        [Newtonsoft.Json.JsonProperty("advisory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Message Advisory { get; set; }

        /// <summary>
        /// Indicates one based index identifying the associated commodity.&lt;br&gt;Example: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commodityIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CommodityIndex { get; set; }

        /// <summary>
        /// Indicates the prohibition source type.&lt;br&gt;Example: source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        /// <summary>
        /// Indicate the shipment rule type.&lt;br&gt;Example: ["categories"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Categories { get; set; }

        /// <summary>
        /// Indicates the prohibition type.&lt;br&gt;Example: type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("waiver", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegulatoryWaiver Waiver { get; set; }

        /// <summary>
        /// Indicates the prohibitory status.&lt;br&gt;Example: status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the advisory details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Message
    {
        /// <summary>
        /// Specifies the message code for the tag created.&lt;br&gt;Example: code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Specifies the text message for the tag created.&lt;br&gt;Example: Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// Specifies the message parameters list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MessageParameter> Parameters { get; set; }

        /// <summary>
        /// Specifies the message ID and value.&lt;br&gt;Example: localizedText
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localizedText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalizedText { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageParameter
    {
        /// <summary>
        /// Specifies the message parameter code.&lt;br&gt;Example: message ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Specifies the message parameter value of the code.&lt;br&gt;Example: value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the regulatory waiver.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegulatoryWaiver
    {
        /// <summary>
        /// Indicates the advisories list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advisories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Message> Advisories { get; set; }

        /// <summary>
        /// Indicates the regulatory prohibitions description.&lt;br&gt;Example: description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates the prohibitory ID.&lt;br&gt;Example: id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are pickup availability request elements.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullSchemaFreightPickupAvailability
    {
        [Newtonsoft.Json.JsonProperty("pickupAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address_Availability PickupAddress { get; set; } = new Address_Availability();

        /// <summary>
        /// The time that the package will be ready for pickup. The time format is HH:MM:SS and it refers to the local timezone. The driver should pick up the package/shipment by the given pickup time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageReadyTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageReadyTime { get; set; }

        /// <summary>
        /// The latest time the driver gets access to pick up the package. The time format is in HH:MM:SS and it refers to the local timezone. The driver should pick up the package by the given pickup time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerCloseTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCloseTime { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentAttributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PickupShipmentAttributes ShipmentAttributes { get; set; }

        [Newtonsoft.Json.JsonProperty("freightPickupSpecialServiceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FullSchemaFreightPickupAvailability_freightPickupSpecialServiceDetail FreightPickupSpecialServiceDetail { get; set; }

        /// <summary>
        /// Indicates the date, the package is to be picked up. The format is YYYY-MM-DD. If the field is left blank, the system considers current date as dispatch date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dispatchDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DispatchDate { get; set; }

        /// <summary>
        /// Number of business days to consider when checking availability.&lt;br&gt;For example if you are indicating pickupDate as Saturday and you indicate 3, Saturday, Sunday and Monday will be considered. &lt;br&gt; Example: 3
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfBusinessDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfBusinessDays { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Descriptive data for a physical location. May be used as an actual physical address (place to which one could go), or as a container of "address parts" which should be handled as a unit (such as a city-state-ZIP combination within the US).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_Availability
    {
        /// <summary>
        /// This is a combination of number, street name, etc. &lt;br&gt;Note: At least one line is required and streetlines more than 3 will be ignored. Empty lines should not be included.&lt;br&gt;Example: [\"10 FedEx Parkway\", \"Suite 302\"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; }

        /// <summary>
        /// Optional&lt;br&gt; In Puerto Rico, identical street names and address number ranges can be found within the same ZIP Code. In these cases, the urbanization name is the only element that correctly identifies the location of a particular address.&lt;br&gt; Example: URB FAIR OAKS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urbanizationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrbanizationCode { get; set; }

        /// <summary>
        /// This is a placeholder for City Name. &lt;br&gt;Note: This is conditional and not required in all the shipping requests. &lt;br&gt; Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        ///  This is a placeholder for State or Province code.State code is required for US, CA, PR and not required for other countries. Conditional.Maximum length is 2. &lt;br&gt; Example: CA &lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State/Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// This is a placeholder for postal code.&lt;br&gt;Note: The postal code is required for postal-aware countries. &lt;br&gt; Example: 38127&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is Residential as opposed to Commercial.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        /// <summary>
        /// Classifies a given address as either of unknown, residential, mixed or business.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressClassification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Address_AvailabilityAddressClassification AddressClassification { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the optional attributes for the shipment related to the pickup inquiry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupShipmentAttributes
    {
        /// <summary>
        /// The FedEx service type for the shipment.&lt;br&gt;Example: FEDEX_FREIGHT_PRIORITY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceType { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight_Availability Weight { get; set; }

        /// <summary>
        /// The FedEx Packaging Type for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackagingType { get; set; }

        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions_Availability Dimensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are the package weight details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight_Availability
    {
        /// <summary>
        /// Indicates the type of package weight.&lt;br&gt; Example: KG
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Weight_AvailabilityUnits Units { get; set; }

        /// <summary>
        /// Weight Value.&lt;br&gt; Example: 68.25&lt;br&gt;&lt;a onclick='loadDocReference("packagetypes")'&gt;Click here to see Weight Values&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the dimensions of the package.&lt;br&gt; Following conditions will apply: &lt;ul&gt;&lt;li&gt;Dimensions are optional but when added, then all three dimensions must be indicated.&lt;/li&gt;&lt;li&gt;Dimensions are required with YOUR_PACKAGING package type.&lt;/li&gt;&lt;/ul&gt;Note: The maximum/minimum dimension values varies based on the services and the packaging types. Refer &lt;a href=" https://www.fedex.com/en-us/service-guide.html# " target="_blank"&gt;FedEx Service Guide&lt;/a&gt; for service details related to DIM Weighting for FedEx Express and oversize conditions for FedEx Express and FedEx Ground.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimensions_Availability
    {
        /// <summary>
        /// Indicate the length of the package. No implied decimal places.&lt;br&gt; Note: No validation is happening. Recommended maximum value is 999.&lt;/br&gt; &lt;br&gt; Example: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        /// <summary>
        /// Indicate the width of the package. No implied decimal places.&lt;br&gt; Note: No validation is happening. Recommended maximum value is 999.&lt;/br&gt; &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        /// <summary>
        /// Indicate the height of the package. No implied decimal places.&lt;br&gt; Note: No validation is happening. Recommended maximum value is 999.&lt;/br&gt; &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        /// <summary>
        /// Unit of measure for the provided dimensions.&lt;br&gt;Valid Values are IN - inches, CM - centimeters. &lt;br&gt;&lt;i&gt;Note: Any value other than CM including blank/null will default to IN.&lt;/i&gt;&lt;br&gt;Example: CM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Dimensions_AvailabilityUnits Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a wrapper class for outputVO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PudcResponseVO_PickupAvailaibility
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// 'This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FreightPickupAvailabilityOutputVO Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response received for the freight pickup availability request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightPickupAvailabilityOutputVO
    {
        /// <summary>
        /// Indicates the close time corresponding to the close time type .&lt;br&gt;Example: 12:00:00-05:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("closeTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CloseTime { get; set; }

        /// <summary>
        /// Identifies whether the close time is specified by the customer or is the default time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("closeTimeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightPickupAvailabilityOutputVOCloseTimeType CloseTimeType { get; set; }

        /// <summary>
        /// A string used to represent the concept of local time at particular location. The format is hh:mm. The local time format does not contain any representation for the time zone.&lt;br&gt;Example: 19:20
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalTime { get; set; }

        /// <summary>
        /// The pickup schedule details, such as the availability for pickup, time when the package is ready to be picked up, indication if the address is residential, cutoff time of the pickup, access time and driver's access to pick up the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FreightPickupScheduleOption> Options { get; set; }

        /// <summary>
        /// Any optional alert messages received when a pickup availability is requested. This includes an alert code, type, and message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightPickupScheduleOption
    {
        /// <summary>
        /// Specifies the FedEx transportation carrier for this pickup option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightPickupScheduleOptionCarrier Carrier { get; set; }

        /// <summary>
        /// Returns true indicates this pickup option is available and false indicates pickup option is not available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("available", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Available { get; set; }

        /// <summary>
        /// Identifies the date (in the pickup postal code's time zone) to which this pickup schedule option refers.&lt;br&gt; Format: YYYY-MM-DD &lt;br&gt; Example: 2019-01-20
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PickupDate { get; set; }

        /// <summary>
        /// Identifies the latest allowed ready time for the pickup option. The time is local to the pickup postal code. It includes a TZD (time zone designator) for FedEx Freight requests.&lt;br&gt; Format:  HH:MM:SS &lt;br&gt; Example: 18:30:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cutOffTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CutOffTime { get; set; }

        [Newtonsoft.Json.JsonProperty("accessTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration AccessTime { get; set; }

        /// <summary>
        /// Indicates whether residential pickup is available for the requested postal code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residentialAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ResidentialAvailable { get; set; }

        /// <summary>
        /// Indicates the scheduled day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduleDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightPickupScheduleOptionScheduleDay ScheduleDay { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the minimum required time window  between the  shipment ReadyTime and the customer close time (or the local 'cutoff time' if it is earlier than the customer close time). &lt;br&gt; Example: hours: 1 minutes: 30
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Duration
    {
        /// <summary>
        /// This is the minimum time window in hours that is allocated for the FedEx courier to make the pickup.&lt;br&gt; Example: 'PT1H0M' means Pickup Time is 1 Hour and 0 Minutes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Hours { get; set; }

        /// <summary>
        /// This is the minimum time window in minutes that is allocated for the FedEx courier to make the pickup.&lt;br&gt; Example: 'PT1H0M' means Pickup Time is 1 Hour and 0 Minutes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Minutes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request elements to create a pickup.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullSchemaCreatePickup
    {
        /// <summary>
        /// The associated account number, which is  invoiced for the freight pickup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associatedAccountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyAccountNumber AssociatedAccountNumber { get; set; } = new PartyAccountNumber();

        /// <summary>
        /// The origin address if different than the one associated with the shipper account. This element value is required when the package is to be picked up from an address other than the shipper account address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PickupOriginDetail_LTL OriginDetail { get; set; } = new PickupOriginDetail_LTL();

        /// <summary>
        /// The total weight of the packages for the pickup. Unit of measure is LB and KG.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Weight> TotalWeight { get; set; }

        /// <summary>
        /// The total number of packages for the pickup.&lt;br&gt; Example: 5
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PackageCount { get; set; }

        /// <summary>
        /// This is a placeholder for any message to be passed to the FedEx pickup. courier.&lt;br&gt; Example: Please ring bell at loading dock.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remarks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remarks { get; set; }

        /// <summary>
        /// Describes the country relationship among the shipments being picked up.&lt;br&gt;'DOMESTIC' indicates intra-country shipping; origin and destination country are the same.&lt;br&gt;'INTERNATIONAL' indicates inter-country shipping; origin and destination countries are different.&lt;br&gt;Not applicable for FedEx Ground shipments&lt;br&gt;Example: DOMESTIC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryRelationships", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FullSchemaCreatePickupCountryRelationships CountryRelationships { get; set; }

        /// <summary>
        /// This is a tracking number for FedEx packages used for tracking a single package or group of packages.&lt;br&gt; Example: XXXX0365XXXX
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Description of the commodity being shipped. &lt;br&gt;Example:This field contains CommodityDescription 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commodityDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommodityDescription { get; set; }

        /// <summary>
        /// This provides the Freight LTL pickup detailed information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightPickupDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FreightPickupDetail FreightPickupDetail { get; set; } = new FreightPickupDetail();

        /// <summary>
        /// The number of oversize packages that are tendered to FedEx Ground.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oversizePackageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OversizePackageCount { get; set; }

        [Newtonsoft.Json.JsonProperty("pickupNotificationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PickupNotificationDetail PickupNotificationDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the PhoneNumberDetails. Maximum of five phone number details are accepted.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhoneNumberDetails
    {
        /// <summary>
        /// Indicates the phone number.&lt;br&gt; Example: 7194446666
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Indicates the phone number type.&lt;br&gt; Example: &lt;ul&gt;&lt;li&gt;FAX&lt;/li&gt;&lt;li&gt;HOME&lt;/li&gt;&lt;li&gt;MOBILE&lt;/li&gt;&lt;li&gt;PAGER&lt;/li&gt;&lt;li&gt;TOLL_FREE&lt;/li&gt;&lt;li&gt;WORK&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumberType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneNumberDetailsPhoneNumberType PhoneNumberType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Pickup Origin Detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupOriginDetail_LTL
    {
        /// <summary>
        /// Indicates the type of pickup address being used whether it is account address, shipper address or alternate address. &lt;br&gt;&lt;br&gt;Note: &lt;ul&gt;&lt;li&gt;The default value is OTHER.&lt;/li&gt;&lt;li&gt; If the value is set to ACCOUNT, then the account address will be used for pickup and the pickupLocation details are not required.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickupAddressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PickupOriginDetail_LTLPickupAddressType PickupAddressType { get; set; }

        [Newtonsoft.Json.JsonProperty("pickupLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Party_createPickup_LTL PickupLocation { get; set; } = new Party_createPickup_LTL();

        /// <summary>
        /// Indicates the date and time when the freight shipment/package is ready for pick up.&lt;br&gt;Format: [YYYY-MM-DDTHH:MM:SSZ]&lt;br&gt;Example: 2020-04-02T11:00:00Z&lt;br&gt;Note:&lt;br&gt;1.The date format must be YYYY-MM-DDTHH:MM:SS.&lt;br&gt;2.The time must be in the format: HH:MM:SS using a 24-hour clock.&lt;br&gt;3.The date and time are separated by the letter T, such as 2015-03-25T09:30:00.&lt;br&gt;4.The time is local to the pickup postal code.&lt;br&gt;5.Do not include a TZD (time zone designator) as it will be ignored.&lt;br&gt;Example: 2019-11-15T11:00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("readyDateTimestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReadyDateTimestamp { get; set; }

        /// <summary>
        /// Indicates the latest local time at which the driver can gain access to pickup the package(s).&lt;br&gt;Format: HH:MM:SS. &lt;br&gt;Example: 18:00:00&lt;br&gt; Note:&lt;br&gt; 1.The time must be in the format: HH:MM:SS using a 24-hour clock.&lt;br&gt; 2.The time is local to the pickup postal code.&lt;br&gt; 3.Do not include a TZD (time zone designator) as it will be ignored.&lt;br&gt;Example: 2019-11-15T11:00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerCloseTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerCloseTime { get; set; }

        /// <summary>
        /// Indicates whether the pickup request is for the same day or on a future date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickupDateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PickupOriginDetail_LTLPickupDateType PickupDateType { get; set; }

        /// <summary>
        ///  Specify a location description from where the courier/driver must pick up the package. It is mandatory for Ground Pickup.&lt;br&gt; Example: FRONT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageLocation { get; set; }

        /// <summary>
        /// Specify the building type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildingPart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PickupOriginDetail_LTLBuildingPart BuildingPart { get; set; }

        /// <summary>
        /// Indicates the building part such as floor suite or apartment number or an identifier of the building.&lt;br&gt;Example: 111
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildingPartDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingPartDescription { get; set; }

        /// <summary>
        /// Specify if it is an early pickup. This applies only to Europe.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earlyPickup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EarlyPickup { get; set; }

        /// <summary>
        /// Specify if any shipping supplies are requested at the pickup origin required to pack the shipment such as FedEx Box, Large Box, FedEx Tube.&lt;br&gt; Example: Supplies requested by customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suppliesRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SuppliesRequested { get; set; }

        /// <summary>
        /// This is the alternate postal code associated with pickup location. (Applicable only for European pickups)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("geographicalPostalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GeographicalPostalCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates attributes for a Party to perform a transaction including the physical address, contact information and account number information. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party_createPickup_LTL
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact_CreatePickup Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address_LTL Address { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAccountNumber AccountNumber { get; set; }

        /// <summary>
        /// Indicates the detailed instructions for delivery.This is used with Ground Home Delivery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryInstructions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the contact details for the party such as name, phonenumber.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact_CreatePickup
    {
        /// <summary>
        /// Specify the contact person's company name. Maximum length is 35.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Specify the contact person's name. Maximum Length is 70.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonName { get; set; }

        /// <summary>
        /// Specify the contact person's phone number. Minimum Length is 8 and Maximum legth is 13.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Specify the contact person's phone extension. Maximum length is 6.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneExtension { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Descriptive data for a physical location. May be used as an actual physical address (place to which one could go), or as a container of "address parts" which should be handled as a unit (such as a city-state-ZIP combination within the US).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_LTL
    {
        /// <summary>
        /// This is a combination of number, street name, etc. &lt;br&gt;Note: At least one line is required and streetlines more than 3 will be ignored. Empty lines should not be included.&lt;br&gt;Example: [\"10 FedEx Parkway\", \"Suite 302\"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; }

        /// <summary>
        /// Optional&lt;br&gt; In Puerto Rico, identical street names and address number ranges can be found within the same ZIP Code. In these cases, the urbanization name is the only element that correctly identifies the location of a particular address.&lt;br&gt; Example: URB FAIR OAKS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urbanizationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrbanizationCode { get; set; }

        /// <summary>
        /// This is a placeholder for City Name. &lt;br&gt;Note: This is conditional and not required in all the shipping requests. &lt;br&gt; Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code.Maximum length is 2.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2 &lt;br&gt; Example: CA &lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State/Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// This is a placeholder for postal code.&lt;br&gt;Note: The postal code is required for postal-aware countries. &lt;br&gt; Example: 38127&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is Residential as opposed to Commercial.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        /// <summary>
        /// Classifies a given address as either of unknown, residential, mixed or business.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressClassification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Address_LTLAddressClassification AddressClassification { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightPickupDetail
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FreightAccountNumber AccountNumber { get; set; }

        /// <summary>
        /// Specifies the role. &lt;br&gt;Example: SHIPPER 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        /// <summary>
        /// Specifies the payment. &lt;br&gt;Example: SENDER
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment { get; set; }

        [Newtonsoft.Json.JsonProperty("submittedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contacts SubmittedBy { get; set; }

        /// <summary>
        /// Specifies the list of line items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LineItems> LineItems { get; set; }

        /// <summary>
        /// The descriptive data of the alternateBilling party for the freight pickup and their physical location. This is used to identify customer's account for billing('Send Bill To'(SBT)).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateBilling", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party AlternateBilling { get; set; }

        /// <summary>
        /// Specifies the user message that can be sent as part of the pickup confirmation email.&lt;br&gt;Example: This is the user message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserMessage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the Account number details to be invoiced for freight pickup.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightAccountNumber
    {
        /// <summary>
        /// Specify value of the account number. Maximum length is 9.&lt;br&gt; Example: 123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// The account key associated with this account number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the contact details for the party such as name, email, and phone number.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contacts
    {
        /// <summary>
        /// Indicates the contact person's company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Indicates the contact person's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonName { get; set; }

        /// <summary>
        /// Indicates the contact person's phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Indicates the contact person's phone extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// contact person's email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the list of line items for Freight LTL.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineItems
    {
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingNumberInfo TrackingNumber { get; set; }

        /// <summary>
        /// Specify the type of service.&lt;br&gt;Example: FEDEX_FREIGHT_ECONOMY, FEDEX_FREIGHT_PRIORITY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service { get; set; }

        /// <summary>
        /// Specify the sequence number of the package.&lt;br&gt;Example: 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SequenceNumber { get; set; }

        /// <summary>
        /// Specify the total handling units.&lt;br&gt;Example: 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalHandlingUnits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalHandlingUnits { get; set; }

        /// <summary>
        /// Specify the boolean value if one or more.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("justOneMore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool JustOneMore { get; set; }

        /// <summary>
        /// Specify the description.&lt;br&gt; Example: "data"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Specify the packaging being used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packaging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LineItemsPackaging Packaging { get; set; }

        /// <summary>
        /// Specifies the number.&lt;br&gt;Example: 4
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Pieces { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight Weight { get; set; }

        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LineItemsDimensions Dimensions { get; set; }

        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address_2 Destination { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentSpecialServicesRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentSpecialServicesRequested ShipmentSpecialServicesRequested { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tracking Information corresponding to a line item such as Tracking number,TrackingQualifier,TrackingCarrier and Tracking number uniqueId.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingNumberInfo
    {
        /// <summary>
        /// The value of the package identifier that is to be used to retrieve the tracking information for a package or group of packages. The only type supported is 'TRACKING_NUMBER_OR_DOORTAG'.  In case of duplicate shipments using the same tracking number, the trackingNumberUniqueId is needed to differentiate between shipments. &lt;br&gt; Example: 123456789012
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Specifies the tracking qualifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingQualifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingQualifier { get; set; }

        /// <summary>
        /// Specifies the FedEx operating company (transportation) used for this package's delivery. The valid values are FDXE, FDXG, FXFR, FXSP, FDXC, FXCC.&lt;br&gt;Example: FDXE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingCarrier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingCarrier { get; set; }

        /// <summary>
        /// This is the unique qualifier for a specific package, used to distinguish between duplicate FedEx trackingNumbers. &lt;br&gt; Example: 245822~123456789012~FDEG
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingUniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingUniqueId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the shipment special services requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentSpecialServicesRequested
    {
        [Newtonsoft.Json.JsonProperty("freightGuaranteeDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentSpecialServicesRequested_freightGuaranteeDetail FreightGuaranteeDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("freightDirectDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentSpecialServicesRequested_freightDirectDetail FreightDirectDetail { get; set; }

        /// <summary>
        /// Special services requested for the shipment.&lt;br&gt;Example: FREIGHT_GUARANTEE &lt;br&gt;&lt;a onclick='loadDocReference("freightlevelspecialservicetypes")'&gt;Click here to see Freight Level Special Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialServiceTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SpecialServiceTypes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupNotificationDetail
    {
        /// <summary>
        /// Specifies the list of email addresses along with locale to which the pickup confirmation email should be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmailDetail> EmailDetails { get; set; }

        /// <summary>
        /// Specifies the format of email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PickupNotificationDetailFormat Format { get; set; }

        /// <summary>
        /// Specifies the user message that can be sent as part of the pickup confirmation email.&lt;br&gt;Example: This is the user message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserMessage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Email addresses along with locale to which the pickup confirmation email must be sent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailDetail
    {
        /// <summary>
        /// Specifies the email address.&lt;br&gt;Example: sample@gmail.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// Specifies the language in which the email needs to be sent.Default value is en_US.&lt;br&gt;Example: en_US. .&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a wrapper class for outputVO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PudcResponseVO
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreatePickupOutputVO Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response elements received when you create a Freight pickup.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePickupOutputVO
    {
        /// <summary>
        /// The confirmation number provided to the customer when a freight pickup is requested. &lt;br&gt; Example : XXXX101XXOS45XXXX
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickupConfirmationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PickupConfirmationCode { get; set; }

        /// <summary>
        /// These are optional alerts received when a Create freight pickup is requested. This includes an alert code, type, and message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a placeholder for cancelled pickup request elements.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullSchemaCancelFreightPickup
    {
        [Newtonsoft.Json.JsonProperty("associatedAccountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyAccountNumber AssociatedAccountNumber { get; set; } = new PartyAccountNumber();

        /// <summary>
        /// The confirmation number provided by FedEx to the customer when the pickup was scheduled or requested.&lt;br&gt; Example: XXXX1007MEM62XXXX.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickupConfirmationCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PickupConfirmationCode { get; set; }

        /// <summary>
        /// Specify the additional information to be passed on the pickup courier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remarks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remarks { get; set; }

        /// <summary>
        /// Specify the reason for cancellation of pickup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Specify the contact name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContactName { get; set; }

        /// <summary>
        /// Specifies the date when pickup dispatch occurs.&lt;br&gt;Format YYYY-MM-DD &lt;br&gt; Example: 2019-10-15
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScheduledDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a wrapper class for outputVO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PudcResponseVO_CancelPickup
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancelFreightPickupOutputVO Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response elements received when you cancel a freight pickup.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelFreightPickupOutputVO
    {
        /// <summary>
        /// This is the Pickup confirmation code. &lt;br&gt; Example: XXXX1007MEM62XXXX
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickupConfirmationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PickupConfirmationCode { get; set; }

        /// <summary>
        /// Indicates the confirmation message for cancelled pickup.&lt;br&gt; Example: Requested pickup has been cancelled Successfully.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelConfirmationMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancelConfirmationMessage { get; set; }

        /// <summary>
        /// Optional alerts received when a cancel pickup is requested. This includes an alert code, type, and message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullSchemaFreightPickupAvailability_freightPickupSpecialServiceDetail
    {
        [Newtonsoft.Json.JsonProperty("shipmentSpecialServicesRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentSpecialServicesRequested ShipmentSpecialServicesRequested { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the freight Direct Detail.It is used for Fedex Freight Direct. Maximum of two Freight direct details are accepted.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentSpecialServicesRequested_freightDirectDetail
    {
        [Newtonsoft.Json.JsonProperty("freightDirectDataDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FreightDirectDataDetail> FreightDirectDataDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the freight guarantee detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentSpecialServicesRequested_freightGuaranteeDetail
    {
        /// <summary>
        /// Specified the time &lt;br&gt;Example: 10:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is detailed information on physical location. May be used as an actual physical address (place to which one could go), or as a container of address parts which should be handled as a unit (such as a city-state-ZIP combination within the US). Country code is required. Postal code is required for postal aware countries. State or province code is mandatory for Puerto Rico.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// Specify name of city, town, etc.&lt;br&gt; Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// Specify State or province code. Maximum length is 2, State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2.&lt;br&gt; Example: CA &lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State Or Province Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// Specify the postal code. This is optional for non postal- aware countries. Maximum length is 10.&lt;br&gt; Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The two-letter country code. Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Descriptive data for a physical location. May be used as an actual physical address (place to which one could go), or as a container of "address parts" which should be handled as a unit (such as a city-state-ZIP combination within the US).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_2
    {
        /// <summary>
        /// This is the combination of number, street name, etc. &lt;br&gt;Note: At least one line is required and streetlines more than 3 will be ignored. Empty lines should not be included. Maximum length per line is 35.&lt;br&gt;Example: [10 FedEx Parkway, Suite 302, .etc.]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// This is a placeholder for City Name.&lt;br&gt;&lt;br&gt;Note: This is conditional and not required in all the requests. &lt;br&gt;&lt;br&gt;Note: It is recommended for Express shipments for the most accurate ODA and OPA surcharges.&lt;br&gt;&lt;br&gt;Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2&lt;br&gt;&lt;br&gt;Example: CA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;click here to see State or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// Indicate the Postal code. This is Optional for non postal-aware countries. Maximum length is 10.&lt;br&gt; Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code.&lt;br&gt;&lt;br&gt;Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the party to a transaction including the physical address, contact information and account number information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumber AccountNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to provide the attributes such as physical address, contact information and account number information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party_2
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address_2 Address { get; set; } = new Address_2();

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Contact Contact { get; set; } = new Contact();

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAccountNumber AccountNumber { get; set; }

        /// <summary>
        /// This is the tax identification number details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxpayerIdentification> Tins { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party_3
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAddress_2 Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyContact_2 Contact { get; set; }

        /// <summary>
        /// This is the tax identification number details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxpayerIdentification> Tins { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the contact details of the shipper.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        /// <summary>
        /// Specify contact person name.&lt;br&gt;Recommended length is 70. &lt;br&gt;&lt;br&gt;Note: There's no specific validation for the person name.&lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonName { get; set; }

        /// <summary>
        /// Specify contact email address. Maximum length is 80. &lt;br&gt; Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Specify contact phone number. &lt;br&gt;&lt;br&gt;Minimum length is 10 and supports maximum of 15 for certain countries using longer phone numbers. &lt;br&gt;Note: Recommended Maximum length is 15 and there's no specific validation will be done for the phone number. &lt;br&gt; Example: 918xxxxx890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Specify contact phone extension. &lt;br&gt;Note: Recommended length is 6. There's no specific validation for the phone extension. &lt;br&gt; Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// Specify contact fax number.&lt;br&gt;Note: Recommended length is 15. There's no specific validation for the fax number.&lt;br&gt; Example: 1234567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Specify contact company name.&lt;br&gt;&lt;br&gt;Recommended length is 35.&lt;br&gt;&lt;br&gt;Note: There's no specific validation for the company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the contact information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact_2
    {
        /// <summary>
        /// Specify person name.&lt;br&gt;Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonName { get; set; }

        /// <summary>
        /// Specify toll free phone number.&lt;br&gt;Example: XXXX7812
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tollFreePhoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TollFreePhoneNumber { get; set; }

        /// <summary>
        /// Specify email address.&lt;br&gt;Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Specify phone number.&lt;br&gt;Example: XXX567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Specify phone extension.&lt;br&gt;Example: 91
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// Specify company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Specify pager number.&lt;br&gt;Example: XXX7812
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pagerNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PagerNumber { get; set; }

        /// <summary>
        /// Specify fax number.&lt;br&gt;Example: XXXX567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Specify the title of the contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify package content details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRecord
    {
        /// <summary>
        /// This is a package item number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemNumber { get; set; }

        /// <summary>
        /// This is the package item quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receivedQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReceivedQuantity { get; set; }

        /// <summary>
        /// This is the description of the package item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// This is the part number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies taxes or miscellaneous charge.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Money
    {
        /// <summary>
        /// This is the amount. Maximum limit is 5 digits before decimal.&lt;br&gt;Example: 12.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// This is the currency code for the amount.&lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;Click here to see Currency codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are the package weight details.&lt;br&gt;Note: Weight is not required for One rate shipments
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight
    {
        /// <summary>
        /// Indicate the weight unit type. The package and commodity weight unit should be the same else the request will result in an error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeightUnits Units { get; set; }

        /// <summary>
        /// Weight Value.&lt;br&gt; Example: 68.25&lt;br&gt;&lt;a onclick='loadDocReference("packagetypes")'&gt;Click here to see Weight Values&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the dimensions of the package.&lt;br&gt; Following conditions will apply: &lt;ul&gt;&lt;li&gt;Dimensions are optional but when added, then all three dimensions must be indicated.&lt;/li&gt;&lt;li&gt;Dimensions are required with YOUR_PACKAGING package type.&lt;/li&gt;&lt;/ul&gt;Note: The maximum/minimum dimension values varies based on the services and the packaging types. Refer &lt;a href="https://www.fedex.com/en-us/service-guide.html" target="_blank"&gt;FedEx Service Guide&lt;/a&gt; for service details related to DIM Weighting for FedEx Express and oversize conditions for FedEx Express and FedEx Ground.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimensions
    {
        /// <summary>
        /// Indicate the length of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        /// <summary>
        /// Indicate the width of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        /// <summary>
        /// Indicate the height of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        /// <summary>
        /// Indicate the Unit of measure for the provided dimensions.&lt;br&gt;Valid Values are:&lt;li&gt;IN - inches&lt;/li&gt;&lt;li&gt;CM - centimeters&lt;/li&gt;Note: Any value other than CM including blank/null will default to IN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DimensionsUnits Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssociatedFreightLineItemDetail
    {
        /// <summary>
        /// A freight line item identifier referring to a freight shipment line item that describes goods contained within this handling unit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the description of an individual commodity or class of content in a shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightShipmentLineItem
    {
        /// <summary>
        /// Number of individual handling units to which this line applies.&lt;br&gt; (The total of line-item-level handling units may not balance to shipment-level total handling units.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("handlingUnits", Required = Newtonsoft.Json.Required.Always)]
        public int HandlingUnits { get; set; }

        /// <summary>
        /// Specify the NMFC(National Motor Freight Classification) Code for commodity in order to get a rate quote or create an online freight shipping label or Bill of Lading.&lt;br&gt;&lt;i&gt;Example:&lt;ul&gt;&lt;li&gt;115030-02&lt;/li&gt;&lt;li&gt;056828-05&lt;/li&gt;&lt;li&gt;056828-29&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nmfcCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NmfcCode { get; set; }

        /// <summary>
        /// This is a sub package type for the package.&lt;br&gt;a onclick='loadDocReference("subpackagetypes")'&gt;Click here to see Sub-Packaging Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subPackagingType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightShipmentLineItemSubPackagingType SubPackagingType { get; set; }

        /// <summary>
        /// Customer-provided description of this line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        /// <summary>
        /// Specifies Total number of pieces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.Always)]
        public int Pieces { get; set; }

        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Volume Volume { get; set; }

        /// <summary>
        /// Specifies Freight class for this line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightClass", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightShipmentLineItemFreightClass FreightClass { get; set; }

        /// <summary>
        /// Specifies Purchase order number for this line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Specifies Identification for content in this line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates the kind of hazardous material content in this line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardousMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightShipmentLineItemHazardousMaterials HazardousMaterials { get; set; }

        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions Dimensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Description of an individual commodity or class of content in a shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightShipmentLineItem_2
    {
        /// <summary>
        /// Number of individual handling units to which this line applies. (NOTE: Total of line-item-level handling units may not balance to shipment-level total handling units.)&lt;br&gt; Example: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("handlingUnits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HandlingUnits { get; set; }

        /// <summary>
        /// Specify the NMFC(National Motor Freight Classification) Code for commodity in order to get a rate quote or create an  online freight shipping label or Bill of Lading.&lt;br&gt;&lt;i&gt;Example:&lt;ul&gt;&lt;li&gt;115030-02&lt;/li&gt;&lt;li&gt;056828-05&lt;/li&gt;&lt;li&gt;056828-29&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nmfcCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NmfcCode { get; set; }

        /// <summary>
        /// This is a sub package type for the package.&lt;br&gt;&lt;a onclick='loadDocReference("subpackagetypes")'&gt;Click here to see Sub-Packaging Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subPackagingType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightShipmentLineItem_2SubPackagingType SubPackagingType { get; set; }

        /// <summary>
        /// Customer-provided description of this line item.&lt;br&gt;Example: description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        /// <summary>
        /// Total number of pieces.&lt;br&gt; Example: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.Always)]
        public int Pieces { get; set; }

        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Volume Volume { get; set; }

        /// <summary>
        /// Required.&lt;br&gt;Freight class for this line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightClass", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightShipmentLineItem_2FreightClass FreightClass { get; set; }

        /// <summary>
        /// Indicates the purchase order number for printed reference.&lt;br&gt;Example: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Indicates the ID for the box.&lt;br&gt; Example: 123
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates the kind of hazardous material content in this line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardousMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightShipmentLineItem_2HazardousMaterials HazardousMaterials { get; set; }

        /// <summary>
        /// Indicate the dimensions of the package.&lt;br&gt; Following conditions will apply: &lt;ul&gt;&lt;li&gt;Dimensions are optional but when added, then all three dimensions must be indicated.&lt;/li&gt;&lt;li&gt;Dimensions are required with YOUR_PACKAGING package type.&lt;/li&gt;&lt;/ul&gt;Note: The maximum/minimum dimension values varies based on the services and the packaging types. Refer &lt;a href="https://www.fedex.com/en-us/service-guide.html#" target="_blank"&gt;FedEx Service Guide&lt;/a&gt; for service details related to DIM Weighting for FedEx Express and oversize conditions for FedEx Express and FedEx Ground.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// The estimate freight class from customer-provided dimensions and weight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classProvidedByCustomer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ClassProvidedByCustomer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Optional
    /// <br/>
    /// <br/>Individual line item volume.
    /// <br/>
    /// <br/>Conditional
    /// <br/>
    /// <br/>Need Volume or Rate for intra mexico rates
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Volume
    {
        /// <summary>
        /// Specifies the unit in Cubic Feet or Cubic Meters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VolumeUnits Units { get; set; }

        /// <summary>
        /// The amount of volume &lt;br&gt; Example: 9.965781217890562
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the contact and address details of a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAndAddress
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address_2 Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the details of freight guarantee.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightGuaranteeDetail
    {
        /// <summary>
        /// Specify how the freight has been guaranteed for delivery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightGuaranteeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightGuaranteeDetailFreightGuaranteeType FreightGuaranteeType { get; set; }

        /// <summary>
        /// Specify the time of shipment based on shippers time zone.&lt;br&gt;Example: 2009-04-12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guaranteeTimestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GuaranteeTimestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Data for a package's rates, as calculated per a specific rate type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageRateDetail
    {
        /// <summary>
        /// Indicates which weight was used for the rate, e.g. actual or dimensional. &lt;br&gt; Example: dimensional
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedWeightMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RatedWeightMethod { get; set; }

        /// <summary>
        /// Specifies the sum of all taxes on this package.&lt;br&gt; Example: 1257.25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalTaxes { get; set; }

        /// <summary>
        /// The total discounts used in the rate calculation.&lt;br&gt; Example: 1257.2&lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFreightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalFreightDiscounts { get; set; }

        /// <summary>
        /// Identifies the manner in which the chargeRate for this line item was applied.&lt;br&gt; Example: 125
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double BaseCharge { get; set; }

        /// <summary>
        /// The total sum of all rebates applied to this package.Example: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalRebates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalRebates { get; set; }

        /// <summary>
        /// Specifies the type used for this specific set of rate data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateType { get; set; }

        [Newtonsoft.Json.JsonProperty("billingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight BillingWeight { get; set; }

        /// <summary>
        /// Specifies the sum of freight charges.&lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netFreight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetFreight { get; set; }

        /// <summary>
        /// Specifies the list of all surcharges that apply to this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge> Surcharges { get; set; }

        /// <summary>
        /// The sum of all surcharges on the package.&lt;br&gt; Example: 569
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSurcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalSurcharges { get; set; }

        /// <summary>
        /// Specifies the sum of packages netFreight and totalSurcharges (not including totalTaxes).&lt;br&gt; Example: 125.32
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netFedExCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetFedExCharge { get; set; }

        /// <summary>
        /// Specifies the sum of packages netFreight, totalSurcharges and totalTaxes. &lt;br&gt;Example: 563.98
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetCharge { get; set; }

        /// <summary>
        /// All rate discounts that apply to this shipment.&lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateDiscount> FreightDiscounts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are package rate details, as calculated per a specific rate type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageRateDetail_2
    {
        /// <summary>
        /// Indicates the weight types used in calculating this rate, such as actual weight or dimensional weight.&lt;br&gt; Example: DIM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedWeightMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RatedWeightMethod { get; set; }

        /// <summary>
        /// The sum of all freight discounts for this package.&lt;br&gt;Example: 44.55
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFreightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalFreightDiscounts { get; set; }

        /// <summary>
        /// The sum of all taxes on this package.&lt;br&gt;Example: 3.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalTaxes { get; set; }

        /// <summary>
        /// Indicates the minumum charge type. INTERNAL FEDEX USE ONLY.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumChargeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MinimumChargeType { get; set; }

        /// <summary>
        /// The package transportation charge(prior to any discounts applied).&lt;br&gt;Example: 45.67
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double BaseCharge { get; set; }

        /// <summary>
        /// Specifies total rebates on this package.&lt;br&gt;Example: 4.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalRebates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalRebates { get; set; }

        /// <summary>
        /// This is the rate type used.&lt;br&gt;Example: PAYOR_RETAIL_PACKAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateType { get; set; }

        [Newtonsoft.Json.JsonProperty("billingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight BillingWeight { get; set; }

        /// <summary>
        /// This is the net freight charges. i.e. base charge minus total freight discounts for a package.&lt;br&gt;Example: 4.89
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netFreight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetFreight { get; set; }

        /// <summary>
        /// These are all surcharges on this package.&lt;br&gt;&lt;a onclick='loadDocReference("surcharges")'&gt;click here to see Surcharges&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge_2> Surcharges { get; set; }

        /// <summary>
        /// The sum of all surcharges on this package.&lt;br&gt;Example: 22.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSurcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalSurcharges { get; set; }

        /// <summary>
        /// This is sum of net freight and total surcharges (not including totalTaxes) for this package.&lt;br&gt;Example: 12.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netFedExCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetFedExCharge { get; set; }

        /// <summary>
        /// This is the sum of net freight, total surcharges and total taxes for a package.&lt;br&gt;Example: 121.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetCharge { get; set; }

        /// <summary>
        /// This is the currency code. &lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see Currency codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Surcharge
    {
        /// <summary>
        /// Identifies the total amount of the shipment-level fees and taxes that are not based on transportation charges or commodity-level estimated duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies the level of surcharge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level { get; set; }

        /// <summary>
        /// Specifies the localized name of the surcharge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies the description of the surcharge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Specifies the type of surcharge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are surcharges details.&lt;br&gt;&lt;a onclick='loadDocReference("surcharges")'&gt;click here to see Surcharges&lt;/a&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Surcharge_2
    {
        /// <summary>
        /// This is the surcharge amount.&lt;br&gt;Example: 15.35
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }

        /// <summary>
        /// This is the surcharge type.&lt;br&gt;Example: APPOINTMENT_DELIVERY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surchargeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SurchargeType { get; set; }

        /// <summary>
        /// Specifies if the surcharge applies to the entire shipment, or to an individual package.&lt;br&gt;Example: PACKAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level { get; set; }

        /// <summary>
        /// Specifies the description for the surcharge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateDiscount
    {
        /// <summary>
        /// Indicates the amount for the rate discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Indicate the name of the discount.&lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates the description for the rate discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates the type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Indicates the percentage of the rate discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Percent { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies discount Rate for Shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateDiscount_2
    {
        /// <summary>
        /// Specifies the amount.&lt;br&gt;Example: 8.9
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// The type of rate discount. &lt;br/&gt; Valid Values are BONUS, COUPON,EARNED,OTHER,VOLUME.&lt;br&gt;Example: COUPON
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateDiscountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateDiscountType { get; set; }

        /// <summary>
        /// Specifies the percentage of Rate discount.&lt;br&gt;Example: 28.9
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Percent { get; set; }

        /// <summary>
        /// Specifies the description of the discounted rate.&lt;br&gt;Example: description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentLegRateDetail
    {
        /// <summary>
        /// Specifies the list of discounts. &lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateDiscount> Discounts { get; set; }

        /// <summary>
        /// Identifies the type of pricing used for this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PricingCode { get; set; }

        /// <summary>
        /// Human-readable text describing the shipment leg.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegDescription { get; set; }

        /// <summary>
        /// Specifies the list of surcharges.&lt;br&gt;Valid value is:&lt;li&gt;PEAK&lt;/li&gt;&lt;li&gt;PEAK_ADDTIONAL_HANDLING&lt;/li&gt;&lt;li&gt;PEAK_OVERSIZE&lt;/li&gt;&lt;li&gt;PEAK_RESIDENTIAL_DELIVERY&lt;/li&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge> Surcharges { get; set; }

        /// <summary>
        /// Indicates which special rating cases applied to this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialRatingApplied", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SpecialRatingApplied { get; set; }

        /// <summary>
        /// Specifies the list of taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tax> Taxes { get; set; }

        /// <summary>
        /// Indicates the rate scale used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateScale { get; set; }

        /// <summary>
        /// This shipment's totalNetCharge and totalDutiesTaxesAndFees. Some duties and taxes are only provided if estimated duties and taxes were calculated for this shipment AND duties, taxes and transportation charges are all paid by the same sender's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetCharge { get; set; }

        /// <summary>
        /// Specifies the total base charge list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalBaseCharge { get; set; }

        [Newtonsoft.Json.JsonProperty("currencyExchangeRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyExchangeRate CurrencyExchangeRate { get; set; }

        /// <summary>
        /// Sum of billing weight for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBillingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight TotalBillingWeight { get; set; }

        /// <summary>
        /// Indicate the three-character ISO currency code. &lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;Click here to see Currency Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a placeholder for single leg of a shipment rates details, as calculated per a specific rate type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentLegRateDetail_2
    {
        /// <summary>
        /// Indicates the rate zone used (based on origin and destination).&lt;br&gt;Example: rateZone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateZone { get; set; }

        /// <summary>
        /// Specifies the Pricing Code.&lt;br&gt;Example: pricingCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PricingCode { get; set; }

        /// <summary>
        /// Specifies the taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tax_2> Taxes { get; set; }

        /// <summary>
        /// Sum of dimensional weights for all packages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDimWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight TotalDimWeight { get; set; }

        /// <summary>
        /// Specifies the total rebate.&lt;br&gt;Example: 2.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalRebates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalRebates { get; set; }

        /// <summary>
        /// Specifies a fuel surcharge percentage.&lt;br&gt;Example: 6.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fuelSurchargePercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FuelSurchargePercent { get; set; }

        /// <summary>
        /// Specifies currency exchange rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyExchangeRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyExchangeRate CurrencyExchangeRate { get; set; }

        /// <summary>
        /// The value used to calculate the weight based on the dimensions.&lt;br&gt;Example: 6
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimDivisor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DimDivisor { get; set; }

        /// <summary>
        /// Type used for this specific set of rate data.&lt;br&gt;Example: PAYOR_RETAIL_PACKAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateType { get; set; }

        /// <summary>
        /// Specifies the location id the destination of shipment leg.&lt;br&gt;Example: HKAA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legDestinationLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegDestinationLocationId { get; set; }

        /// <summary>
        /// Identifies the type of dim divisor that was applied.&lt;br&gt;Example: dimDivisorType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimDivisorType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DimDivisorType { get; set; }

        /// <summary>
        /// The total freight charge that was calculated before surcharges, discounts and taxes.&lt;br&gt;Example: 6.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalBaseCharge { get; set; }

        /// <summary>
        /// Indicates which weight was used.&lt;br&gt;Example: ratedWeightMethod
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedWeightMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RatedWeightMethod { get; set; }

        /// <summary>
        /// The sum of all discounts.&lt;br&gt;Example: 9.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFreightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalFreightDiscounts { get; set; }

        /// <summary>
        /// Total of the transportation-based taxes.&lt;br&gt;Example: 12.6
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalTaxes { get; set; }

        /// <summary>
        /// Specifies minimum charge type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumChargeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MinimumChargeType { get; set; }

        /// <summary>
        /// Total of shipments duties and taxes; only provided if estimated duties and taxes were calculated for this shipment.&lt;br&gt;Example: 17.78
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDutiesAndTaxes { get; set; }

        /// <summary>
        /// The freight charge minus discounts.&lt;br&gt;Example: 6.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetFreight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetFreight { get; set; }

        /// <summary>
        /// This is the sum of shipment's total surcharges (not including total taxes).&lt;br&gt;Example: 3.2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetFedExCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetFedExCharge { get; set; }

        /// <summary>
        /// All surcharges that apply to this shipment.&lt;br&gt;&lt;a onclick='loadDocReference("surcharges")'&gt;click here to see surcharges&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge_2> Surcharges { get; set; }

        /// <summary>
        /// The total of all surcharges.&lt;br&gt;Example: 5.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSurcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalSurcharges { get; set; }

        /// <summary>
        /// The weight used to calculate these rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBillingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight TotalBillingWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("freightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateDiscount_2> FreightDiscounts { get; set; }

        /// <summary>
        /// Indicates the rate scale used.&lt;br&gt;Example: 6702
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateScale { get; set; }

        /// <summary>
        /// The net charge after applying all discounts and surcharges.&lt;br&gt;Example: 253
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetCharge { get; set; }

        /// <summary>
        /// Sum of total net charge, total duties and taxes; only provided if estimated duties and taxes were calculated for this shipment and duties, taxes and transportation charges are all paid by the same sender account.&lt;br&gt;Example: 25.67
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetChargeWithDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetChargeWithDutiesAndTaxes { get; set; }

        /// <summary>
        /// This is the currency code for the amount.&lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see Currency codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the Tax surcharge details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tax
    {
        /// <summary>
        /// Specifies the list of tax amounts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies the localized name of the tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies the description of the Surcharge/Tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Specifies the type of Surcharge/Tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the tax for the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tax_2
    {
        /// <summary>
        /// Indicates the amount of tax.&lt;br&gt;Example: 10.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Indicates the level of tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level { get; set; }

        /// <summary>
        /// Specifies the tax description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Specifies the type of the tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the currency exchange performed on financial amounts on this rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyExchangeRate
    {
        /// <summary>
        /// Multiplier used to convert from Currency units to into Currency units.&lt;br&gt;Example: 25.6
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Rate { get; set; }

        /// <summary>
        /// The currency code for the original (converted FROM) currency.&lt;br&gt;Example: Rupee&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see Currency codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromCurrency { get; set; }

        /// <summary>
        /// The currency code for the final(converted INTO) currency.&lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see currencycodes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("intoCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IntoCurrency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is shipment level rate data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentRateDetail
    {
        [Newtonsoft.Json.JsonProperty("currencyExchangeRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyExchangeRate CurrencyExchangeRate { get; set; }

        /// <summary>
        /// Indicates the currency associated with the amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// Indicates the rate zone used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateZone { get; set; }

        /// <summary>
        /// Indicates the type of pricing code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PricingCode { get; set; }

        /// <summary>
        /// Indicates the total discounts used in the rate calculation. Example: 856.32
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFreightDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalFreightDiscount { get; set; }

        /// <summary>
        /// Indicates which special rating cases applied to this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialRatingApplied", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SpecialRatingApplied { get; set; }

        /// <summary>
        /// This is sum of all surcharges on the package. Example: 586.25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSurcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalSurcharges { get; set; }

        /// <summary>
        /// This is total discount used in the rate calculation.&lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateDiscount> FreightDiscount { get; set; }

        /// <summary>
        /// This is fuel surcharge percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fuelSurchargePercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FuelSurchargePercent { get; set; }

        /// <summary>
        /// This is total of billing weight for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBillingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight TotalBillingWeight { get; set; }

        /// <summary>
        /// This is total of dimensional weight for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDimWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight TotalDimWeight { get; set; }

        /// <summary>
        /// Identifies the type of divisor applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimDivisor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DimDivisor { get; set; }

        /// <summary>
        /// Indicates the surcharges applied to this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge> SurCharges { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a placeholder for shipment total/summary rates details, as calculated per a specific rate type. The totals may differ from the sum of corresponding package data for Multiweight or Express MPS.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentRateDetail_2
    {
        /// <summary>
        /// Indicates the rate zone used (based on origin and destination).&lt;br&gt;Example: US001O
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateZone { get; set; }

        /// <summary>
        /// Indicates which weight was used.&lt;br&gt;Example: ACTUAL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedWeightMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RatedWeightMethod { get; set; }

        /// <summary>
        /// The total of the total duties &amp; taxes and the total ancillary fees &amp; taxes.&lt;br&gt;Example: 24.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDutiesTaxesAndFees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDutiesTaxesAndFees { get; set; }

        /// <summary>
        /// Specifies pricing Code.&lt;br&gt;Example: PACKAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PricingCode { get; set; }

        /// <summary>
        /// The total discounts used in the rate calculation.&lt;br&gt;Example: 1.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFreightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalFreightDiscounts { get; set; }

        /// <summary>
        /// Total of the transportation-based taxes.&lt;br&gt;Example: 3.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalTaxes { get; set; }

        /// <summary>
        /// Total of all values under this shipment's duties and taxes; only provided if estimated duties and taxes were calculated for this shipment.&lt;br&gt;Example: 6.78
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDutiesAndTaxes { get; set; }

        /// <summary>
        /// Identifies the total amount of the shipment-level fees and taxes that are not based on transportation charges or commodity-level estimated duties and taxes.&lt;br&gt;Example: 5.67
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAncillaryFeesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalAncillaryFeesAndTaxes { get; set; }

        /// <summary>
        /// All transportation-based taxes applicable to this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Taxes { get; set; }

        /// <summary>
        /// The total sum of all rebates applied to this shipment.&lt;br&gt;Example: 1.98
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalRebates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalRebates { get; set; }

        /// <summary>
        /// Specifies a fuel surcharge percentage.&lt;br&gt;Example: 4.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fuelSurchargePercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FuelSurchargePercent { get; set; }

        [Newtonsoft.Json.JsonProperty("currencyExchangeRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyExchangeRate CurrencyExchangeRate { get; set; }

        /// <summary>
        /// The freight charge minus discounts.&lt;br&gt;Example: 9.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetFreight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetFreight { get; set; }

        /// <summary>
        /// This is the sum of shipment's total net freight, total surchages (not including totalTaxes).&lt;br&gt;Example: 88.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetFedExCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetFedExCharge { get; set; }

        /// <summary>
        /// This is data for a single leg of a shipment's total/summary rates, as calculated per a specific rate type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentLegRateDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentLegRateDetail_2> ShipmentLegRateDetails { get; set; }

        /// <summary>
        /// The value used to calculate the weight based on the dimensions.&lt;br&gt;Example: 0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimDivisor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DimDivisor { get; set; }

        /// <summary>
        /// The Type used for this specific set of rate data.&lt;br&gt;Example: RATED_ACCOUNT_SHIPMENT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateType { get; set; }

        /// <summary>
        /// All surcharges that apply to this shipment.&lt;br&gt;&lt;a onclick='loadDocReference("surcharges")'&gt;click here to see Surcharges&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge_2> Surcharges { get; set; }

        /// <summary>
        /// The total amount of all surcharges applied to this shipment.&lt;br&gt;Example: 9.88
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSurcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalSurcharges { get; set; }

        /// <summary>
        /// The weight used to calculate these rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBillingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight TotalBillingWeight { get; set; }

        /// <summary>
        /// Indicates the freight discounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateDiscount_2> FreightDiscounts { get; set; }

        /// <summary>
        /// Indicates the rate scale used.&lt;br&gt;Example: 00000
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateScale { get; set; }

        /// <summary>
        /// The net charge after applying all discounts and surcharges.&lt;br&gt;Example: 3.78
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetCharge { get; set; }

        /// <summary>
        /// The total Shipment charge that was calculated before surcharges, discounts and taxes.&lt;br&gt;Example: 234.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalBaseCharge { get; set; }

        /// <summary>
        /// This is the sum of shipment's total net charges and total duties and taxes; only provided if estimated duties and taxes were calculated for this shipment AND duties, taxes and transportation charges are all paid by the same sender account.&lt;br&gt;Example: 222.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetChargeWithDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetChargeWithDutiesAndTaxes { get; set; }

        /// <summary>
        /// Indicates the currency code.&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see Currency Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Descriptions for a service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceDescription
    {
        /// <summary>
        /// Indicate the FedEx serviceType used for this shipment. The results will be filtered by the serviceType value indicated.&lt;br&gt;Example: STANDARD_OVERNIGHT&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;click here to see Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceType { get; set; }

        /// <summary>
        /// Specifies code of the Service.&lt;br&gt;example: 80
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Branded, translated, and/or localized names for this service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductName> Names { get; set; }

        /// <summary>
        /// FOR FEDEX INTERNAL USE ONLY. The operating org code in a service.&lt;br&gt;Example: ["FXE", "FXE"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operatingOrgCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OperatingOrgCodes { get; set; }

        /// <summary>
        /// Specifies astra Description.&lt;br&gt;Example: 2 DAY FRT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AstraDescription { get; set; }

        /// <summary>
        /// Specifies the description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// FOR FEDEX INTERNAL USE ONLY, Designates the service ID.&lt;br&gt;Example: EP1000000027
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceId { get; set; }

        /// <summary>
        /// FOR FEDEX INTERNAL USE ONLY. This is tied to the Product EFS interface definition which will currently contain the values of parcel.&lt;br&gt;Example: EXPRESS_PARCEL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceCategory { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Product Name information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductName
    {
        /// <summary>
        /// The type of name (long, medium, short, etc.) to which this value refers.&lt;br&gt;Example: long
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The character encoding used to represent this product name. &lt;br&gt;Example: UTF-8
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Encoding { get; set; }

        /// <summary>
        /// Specifies the value of the Product.&lt;br&gt;Example: F-2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are Broker Detail for the rate quote.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrokerDetail
    {
        [Newtonsoft.Json.JsonProperty("broker", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Party Broker { get; set; } = new Party();

        /// <summary>
        /// This is Broker Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokerDetailType Type { get; set; }

        /// <summary>
        /// This is the delivery commitment date/time the shipment will arrive at the border. &lt;br&gt; Example: 2019-07-22
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokerCommitTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrokerCommitTimestamp { get; set; }

        /// <summary>
        /// This is the delivery commitment day of the week the shipment will arrive at the border. &lt;br&gt; Example: SUNDAY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokerCommitDayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrokerCommitDayOfWeek { get; set; }

        /// <summary>
        /// This is the FedEx location identifier for the broker. &lt;br&gt; Example: HKAA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokerLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrokerLocationId { get; set; }

        [Newtonsoft.Json.JsonProperty("brokerAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Brokeraddress BrokerAddress { get; set; }

        /// <summary>
        /// These are number of days it will take for the shipment to make it from broker. &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokerToDestinationDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BrokerToDestinationDays { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are broker details for the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrokerDetail_2
    {
        /// <summary>
        /// These are broker details for the shipment with physical address, contact and account number information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("broker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_2 Broker { get; set; }

        /// <summary>
        /// Identifies the type of broker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokerDetail_2Type Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The delivery commitment details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommitDetail
    {
        /// <summary>
        /// Code indicating the number of transit days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("daysInTransit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommitDetailDaysInTransit DaysInTransit { get; set; }

        /// <summary>
        /// Indicates if there is a guaranteed delivery option applied to the rate.  This is for freight rates only.&lt;br&gt; Valid values&lt;br&gt;GUARANTEED_MORNING - guaranteed delivery on morning of date specified.&lt;br&gt;GUARANTEED_CLOSE_OF_BUSINESS - guaranteed delivery on date specified by close of day
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guaranteedType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommitDetailGuaranteedType GuaranteedType { get; set; }

        [Newtonsoft.Json.JsonProperty("dateDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateDetail DateDetail { get; set; }

        /// <summary>
        /// Specifies the saturdayDelivery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saturdayDelivery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SaturdayDelivery { get; set; }

        /// <summary>
        /// Specifies the alternate names of commodities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternativeCommodityNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AlternativeCommodityNames { get; set; }

        [Newtonsoft.Json.JsonProperty("transitDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransitDays TransitDays { get; set; }

        /// <summary>
        /// This is an informational message to inform client Deliverydate is unavailable. If commitTimestamp and transitTime are unavailable, then this is populated in the response in the client language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Messages concerning the ability to provide an accurate delivery commitment on an International commit quote. These could be messages providing information about why a commitment could not be returned or a successful message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitMessageDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommitMessageDetails { get; set; }

        /// <summary>
        /// The Commodity applicable to this commitment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commodityName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommodityName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are alert details received in the response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Alert
    {
        /// <summary>
        /// Specifies the API alert code.&lt;br&gt;Example: SHIP.RECIPIENT.POSTALCITY.MISMATCH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Specifies the API alert type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alertType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertType AlertType { get; set; }

        /// <summary>
        /// Specifies the API alert message.&lt;br&gt;Example: Recipient Postal-City Mismatch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: a9053a7d-6865-42ab-b323-4632db263ab4
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: ACCOUNTNUMBER.REGISTRATION.REQUIRED, LOGIN.REAUTHENTICATE.ERROR, UNAUTHORIZED.USAGE, NOT.FOUND.ERROR, INTERNAL.SERVER.ERROR, SERVICE.UNAVAILABLE.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter> ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: Please enter a valid 9-digit FedEx account number or register for a new FedEx account number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of parameters which indicates the properties of the alert message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameter
    {
        /// <summary>
        /// Identifies the error option to be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Indicates the value associated with the key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The descriptive data for the FreightShipment being tendered to FedEx.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreightRequestedShipment_Freight
    {
        /// <summary>
        /// This is the shipment date. Default value is current date in case the date is not provided in the request.&lt;br&gt;Format [YYYY-MM-DD].&lt;br&gt;Example: 2019-10-14
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDatestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipDatestamp { get; set; }

        /// <summary>
        /// Indicate if shipment is being dropped off at a FedEx location or being picked up by FedEx or if it's a regularly scheduled pickup for this shipment.&lt;br&gt;&lt;a onclick='loadDocReference("pickuptypes")'&gt;Click here for more information on Pickup Types.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickupType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreightRequestedShipment_FreightPickupType PickupType { get; set; }

        /// <summary>
        /// Indicate the Service Type for this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceType { get; set; }

        /// <summary>
        /// Indicate the packaging type used for the shipment.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PackagingType { get; set; }

        /// <summary>
        /// Indicate the shipment total weight in pounds.&lt;br&gt;&lt;br&gt;Example: 10.6
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalWeight { get; set; }

        /// <summary>
        /// Indicate the currency the caller requests to have used in all returned monetary values. Should be Used in conjunction with the element RateRequestType.&lt;br&gt;Example: USD&lt;br&gt;&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see available Currency codes&lt;/a&gt;&lt;br&gt;&lt;br&gt;Note: Incorrect currency codes should not be supplied. The system ignores the incorrect currency code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreferredCurrency { get; set; }

        /// <summary>
        /// Descriptive data identifying the party responsible for shipping the package. Shipper and Origin should have the same address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipperParty Shipper { get; set; } = new ShipperParty();

        /// <summary>
        /// The descriptive information for the recipient of the shipment and the physical location for the package destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RecipientParty Recipient { get; set; } = new RecipientParty();

        /// <summary>
        /// Will indicate the party responsible for purchasing the goods shipped from the shipper to the recipient. The sold to party is not necessarily the recipient or the importer of record. The sold to party is relevant when the purchaser, rather than the recipient determines when certain customs regulations apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("soldTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SoldToParty SoldTo { get; set; }

        /// <summary>
        /// Original address information for the shipment, if different from shipper’s address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("shippingChargesPayment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FreightPayment ShippingChargesPayment { get; set; } = new FreightPayment();

        [Newtonsoft.Json.JsonProperty("freightShipmentSpecialServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FreightShipment2020SpecialServicesRequested FreightShipmentSpecialServices { get; set; }

        [Newtonsoft.Json.JsonProperty("emailNotificationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EMailNotificationDetail EmailNotificationDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("freightShipmentDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Freight2020ShipmentDetail FreightShipmentDetail { get; set; } = new Freight2020ShipmentDetail();

        [Newtonsoft.Json.JsonProperty("variableHandlingChargeDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariableHandlingChargeDetail VariableHandlingChargeDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("customsClearanceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomsClearanceDetail CustomsClearanceDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("labelSpecification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LabelSpecification LabelSpecification { get; set; } = new LabelSpecification();

        [Newtonsoft.Json.JsonProperty("shippingDocumentSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LTLShippingDocumentSpecification ShippingDocumentSpecification { get; set; }

        /// <summary>
        /// Indicate the type of rates to be returned. The account specific rates are returned by default if the account number is specified in the request.&lt;br&gt;Following are values:&lt;ul&gt;&lt;li&gt;LIST - Returns FedEx published list rates in addition to account-specific rates (if applicable).&lt;/li&gt;&lt;li&gt;INCENTIVE - This is one-time discount for incentivising the customer. For more information, contact your FedEx representative.&lt;/li&gt;&lt;li&gt;ACCOUNT - Returns account specific rates (Default).&lt;/li&gt;&lt;li&gt;PREFERRED - Returns rates in the preferred currency specified in the element preferredCurrency.&lt;/li&gt;&lt;li&gt;RETAIL - Returns customer rate from one of retail FedEx service centers.&lt;/li&gt;&lt;/ul&gt;Examples: ["ACCOUNT", "PREFERRED"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateRequestType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<rateRequestType> RateRequestType { get; set; }

        /// <summary>
        /// For an MPS, this is the total number of packages in the shipment.&lt;br&gt;Example: 25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPackageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalPackageCount { get; set; }

        [Newtonsoft.Json.JsonProperty("masterTrackingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingId MasterTrackingId { get; set; }

        /// <summary>
        /// One or more package-attribute descriptions, each of which describes an individual package, a group of identical packages, or (for the total-piece-total-weight case) common characteristics of packages in the shipment. At least one array instance containing the weight for at least one package is required for EXPRESS and GROUND shipments.  Not used for FREIGHT.&lt;br&gt;Single piece requests will have one RequestedPackageLineItem.&lt;br&gt;  Multiple piece requests will have multiple RequestedPackageLineItems.&lt;br&gt;Maximum occurrences is 99.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedPackageLineItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FreightRequestedPackageLineItem> RequestedPackageLineItems { get; set; } = new System.Collections.ObjectModel.Collection<FreightRequestedPackageLineItem>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify detailed Billing Address information for above FedEx Freight Account Number. May be used as an actual physical address (place to which one could go), or as a container of address parts which should be handled as a unit (such as a city-state-ZIP combination within the US).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartyAddress
    {
        /// <summary>
        /// This is the combination of number, street name, etc. Maximum length per line is 35.&lt;br&gt;Example: 10 FedEx Parkway, Suite 302.&lt;p&gt;&lt;i&gt;Note:&lt;ul&gt;&lt;li&gt;At least one line is required.&lt;/li&gt;&lt;li&gt;Streetlines more than 3 will be ignored.&lt;/li&gt;&lt;li&gt;Empty lines should not be included&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;&lt;/p&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// This is a placeholder for City Name. &lt;br&gt;&lt;br&gt;Note: This is conditional and not required in all the requests. &lt;br&gt;&lt;br&gt;Note: It is recommended for Express shipments for the most accurate ODA and OPA surcharges.&lt;br&gt;&lt;br&gt;Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }

        /// <summary>
        /// This is a placeholder for state or province code. State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2&lt;br&gt;&lt;br&gt;Example: CA.&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;click here to see State or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// This is the postal code.&lt;br&gt;&lt;br&gt;Note: This is Optional for non postal-aware countries. Maximum length is 10.&lt;br&gt;&lt;br&gt;Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code.&lt;br&gt;&lt;br&gt;Maximum length is 2.&lt;br&gt;&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is detailed information on physical location. May be used as an actual physical address (place to which one could go), or as a container of address parts which should be handled as a unit (such as a city-state-ZIP combination within the US).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartyAddress_2
    {
        /// <summary>
        /// This is the combination of number, street name, etc. Maximum length per line is 35.&lt;br&gt;Example: 10 FedEx Parkway, Suite 302.&lt;p&gt;&lt;i&gt;Note:&lt;ul&gt;&lt;li&gt;At least one line is required.&lt;/li&gt;&lt;li&gt;Streetlines more than 3 will be ignored.&lt;/li&gt;&lt;li&gt;Empty lines should not be included&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;&lt;/p&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; }

        /// <summary>
        /// This is a placeholder for City Name. &lt;br&gt;&lt;br&gt;Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2&lt;br&gt;&lt;br&gt;Example: CA.&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;click here to see State or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrProvinceCode { get; set; }

        /// <summary>
        /// This is the Postal code.&lt;br&gt;&lt;br&gt;This is Optional for non postal-aware countries.&lt;br&gt;Maximum length is 10.&lt;br&gt;&lt;br&gt;Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code.&lt;br&gt;&lt;br&gt;Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        /// <summary>
        /// Indicates the geographic coordinates. &lt;br&gt; example: geographicCoordinates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("geographicCoordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GeographicCoordinates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the contact details for this shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartyContact
    {
        /// <summary>
        /// Specify contact name. Maximum length is 70. &lt;br&gt;Note: Either the companyName or personName is mandatory.&lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonName { get; set; }

        /// <summary>
        /// Specify contact email address. Maximum length is 80. &lt;br&gt; Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Specify contact phone extension. Maximum length is 6. &lt;br&gt; Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// Specify contact phone number. &lt;br&gt;&lt;br&gt;Minimum length is 10 and supports Maximum as 15 for certain countries using longer phone numbers. &lt;br&gt;Note: Recommended Maximum length is 15 and there's no specific validation will be done for the phone number. &lt;br&gt; Example: 918xxxxx890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Specify contact company name. Maximum length is 35. &lt;br&gt;Note: Either the companyName or personName is mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the contact details for this shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartyContact_2
    {
        /// <summary>
        /// Specify contact name. Maximum length is 70. &lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonName { get; set; }

        /// <summary>
        /// Specify contact email address. Maximum length is 80. &lt;br&gt; Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Specify contact phone extension. Maximum length is 6. &lt;br&gt; Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// Specify contact phone number. &lt;br&gt;&lt;br&gt;Minimum length is 10 and supports Maximum as 15 for certain countries using longer phone numbers. &lt;br&gt;Note: Recommended Maximum length is 15 and there's no specific validation will be done for the phone number. &lt;br&gt; Example: 918xxxxx890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Specify contact company name.&lt;br&gt;&lt;br&gt;Recommended length is 35.&lt;br&gt;&lt;br&gt;Note: There's no specific validation for the company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Specify contact person's fax number. Maximum length is 15.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaxNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about the person who is paying for the shipment. Not applicable for credit card payment. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payor
    {
        [Newtonsoft.Json.JsonProperty("responsibleParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Party_2 ResponsibleParty { get; set; } = new Party_2();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a payment type, basically indicates who is the payor for the shipment.Conditional required for International Shipments
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payment
    {
        [Newtonsoft.Json.JsonProperty("payor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payor Payor { get; set; }

        [Newtonsoft.Json.JsonProperty("billingDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingDetails BillingDetails { get; set; }

        /// <summary>
        /// This is a payment type, basically indicates who is the payor for the shipment.&lt;br&gt;Required for Express and Ground.&lt;br&gt;The payment type COLLECT is applicable only for Ground shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentType PaymentType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the doc tab specification for different zones on the label. The specification includes zone number, header and data field to be displayed on the label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocTabContentZone
    {
        /// <summary>
        /// Indicate the doc tab specifications for the individual doc tab zone on the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docTabZoneSpecifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DocTabZoneSpecification> DocTabZoneSpecifications { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the Hazardous Commodity Quantity Detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityQuantityDetail
    {
        /// <summary>
        /// Specifies which measure of quantity is to be validated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HazardousCommodityQuantityDetailQuantityType QuantityType { get; set; }

        /// <summary>
        /// Number of units of the type below.&lt;br&gt;Example: 34.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies the units.&lt;br&gt;Example: KG
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer-provided specifications for handling individual commodities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityContent
    {
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityQuantityDetail Quantity { get; set; }

        /// <summary>
        /// Specifies the inner receptacles within the container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("innerReceptacles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HazardousCommodityInnerReceptacleDetail> InnerReceptacles { get; set; }

        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityOptionDetail Options { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityDescription Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityInnerReceptacleDetail
    {
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityQuantityDetail Quantity { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates details of hazardous commodity option detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityOptionDetail
    {
        /// <summary>
        /// Indicates the label text option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelTextOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HazardousCommodityOptionDetailLabelTextOption LabelTextOption { get; set; }

        /// <summary>
        /// 'DG Data Upload Mode:- Optional.,DG Full Validation Mode:- Optional,Text used in labeling the commodity under control of the LabelTextOption field&lt;br&gt;Example:Customer Supplied Label Text' 
        /// <br/>
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerSuppliedLabelText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerSuppliedLabelText { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Required&lt;br&gt;Details of hazardous commodity description.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityDescription
    {
        /// <summary>
        /// Required&lt;br&gt;Specify the sequence number.&lt;br&gt;Example: 9812
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Indicates any special processing options to be applied to the description of the dangerous goods commodity &lt;br&gt; Example: ["INCLUDE_SPECIAL_PROVISIONS"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processingOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ProcessingOptions> ProcessingOptions { get; set; }

        /// <summary>
        /// Required
        /// <br/>
        /// <br/>Indicates list of subsidiary classes&lt;br&gt;Example: ["Subsidiary Classes"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subsidiaryClasses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SubsidiaryClasses { get; set; }

        /// <summary>
        /// Specifies the text for the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LabelText { get; set; }

        /// <summary>
        /// Specifies the technical name for the hazardous material.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("technicalName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TechnicalName { get; set; }

        [Newtonsoft.Json.JsonProperty("packingDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityPackingDetail PackingDetails { get; set; }

        /// <summary>
        /// Information related to quantity limitations and operator or state variations as may be applicable to the dangerous goods commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Authorization { get; set; }

        /// <summary>
        /// Reportable Quantity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportableQuantity", Required = Newtonsoft.Json.Required.Always)]
        public bool ReportableQuantity { get; set; }

        /// <summary>
        /// Percentage&lt;br&gt;Example: 12.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Percentage { get; set; }

        /// <summary>
        /// ID&lt;br&gt;Example: 123
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Identifies DOT packing group for a hazardous commodity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingGroup", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HazardousCommodityDescriptionPackingGroup PackingGroup { get; set; }

        /// <summary>
        /// The proper shipping name as defined by the regulation. The name can also include qualifying words&lt;br&gt;Example: properShippingName
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properShippingName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProperShippingName { get; set; }

        /// <summary>
        /// Specifies the hazard class for the commodity&lt;br&gt;Example: hazard Class
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HazardClass { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies documentation and limits for validation of an individual packing group/category. DG Data Upload Mode: Required (IATA), Optional (Other), DG Full Validation Mode: Required (IATA), Optional (Other),
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityPackingDetail
    {
        /// <summary>
        /// Coded specification for how commodity is to be packed.&lt;br&gt;Example: packing Instructions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackingInstructions { get; set; }

        /// <summary>
        /// Shipment is packaged/documented for movement ONLY on cargo aircraft
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cargoAircraftOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool CargoAircraftOnly { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LTLRateRequestControlParametersVariableOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SATURDAY_DELIVERY")]
        SATURDAY_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FREIGHT_GUARANTEE")]
        FREIGHT_GUARANTEE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LTLRateRequestControlParametersRateSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COMMITASCENDING")]
        COMMITASCENDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICENAMETRADITIONAL")]
        SERVICENAMETRADITIONAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMITDESCENDING")]
        COMMITDESCENDING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RateRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INCENTIVE")]
        INCENTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LTLPaymentPaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER")]
        SENDER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_PARTY")]
        THIRD_PARTY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LTLFreightShipmentDetailRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONSIGNEE")]
        CONSIGNEE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RatedShipmentDetailRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL")]
        ACTUAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT")]
        CURRENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INCENTIVE")]
        INCENTIVE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED")]
        PREFERRED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_INCENTIVE")]
        PREFERRED_INCENTIVE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_CURRENCY")]
        PREFERRED_CURRENCY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RatedShipmentDetailRatedWeightMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL")]
        ACTUAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AVERAGE_PACKAGE_WEIGHT_MINIMUM")]
        AVERAGE_PACKAGE_WEIGHT_MINIMUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT_WEIGHT_APPLIED")]
        DEFAULT_WEIGHT_APPLIED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BALLOON")]
        BALLOON = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DIM")]
        DIM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FREIGHT_MINIMUM")]
        FREIGHT_MINIMUM = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MIXED")]
        MIXED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERSIZE")]
        OVERSIZE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERSIZE_1")]
        OVERSIZE_1 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERSIZE_2")]
        OVERSIZE_2 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERSIZE_3")]
        OVERSIZE_3 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGING_MINIMUM")]
        PACKAGING_MINIMUM = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"WEIGHT_BREAK")]
        WEIGHT_BREAK = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RatedShipmentDetailFreightChargeBasis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CWT")]
        CWT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FLAT")]
        FLAT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MINIMUM")]
        MINIMUM = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DistanceUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MI")]
        MI = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocationAttributeTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTS_CASH")]
        ACCEPTS_CASH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALREADY_OPEN")]
        ALREADY_OPEN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COPY_AND_PRINT_SERVICES")]
        COPY_AND_PRINT_SERVICES = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DANGEROUS_GOODS_SERVICES")]
        DANGEROUS_GOODS_SERVICES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT_MAIL_SERVICES")]
        DIRECT_MAIL_SERVICES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPRESS_FREIGHT_DROPOFFS")]
        EXPRESS_FREIGHT_DROPOFFS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPRESS_PARCEL_DROPOFFS")]
        EXPRESS_PARCEL_DROPOFFS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_FREIGHT_DROPOFFS")]
        FEDEX_FREIGHT_DROPOFFS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_DROPOFFS")]
        GROUND_DROPOFFS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_HOME_DELIVERY_DROPOFFS")]
        GROUND_HOME_DELIVERY_DROPOFFS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCATION_IS_IN_AIRPORT")]
        LOCATION_IS_IN_AIRPORT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NOTARY_SERVICES")]
        NOTARY_SERVICES = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"OBSERVES_DAY_LIGHT_SAVING_TIMES")]
        OBSERVES_DAY_LIGHT_SAVING_TIMES = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"OPEN_TWENTY_FOUR_HOURS")]
        OPEN_TWENTY_FOUR_HOURS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PACK_AND_SHIP")]
        PACK_AND_SHIP = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGING_SUPPLIES")]
        PACKAGING_SUPPLIES = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT_PHOTO_SERVICES")]
        PASSPORT_PHOTO_SERVICES = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNS_SERVICES")]
        RETURNS_SERVICES = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SATURDAY_DROPOFFS")]
        SATURDAY_DROPOFFS = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"SIGNS_AND_BANNERS_SERVICE")]
        SIGNS_AND_BANNERS_SERVICE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"WEEKDAY_EXPRESS_HOLD_AT_LOCATION")]
        WEEKDAY_EXPRESS_HOLD_AT_LOCATION = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"WEEKDAY_GROUND_HOLD_AT_LOCATION")]
        WEEKDAY_GROUND_HOLD_AT_LOCATION = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"SONY_PICTURE_STATION")]
        SONY_PICTURE_STATION = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPANDED_OFFICE_SUPPLIES_AND_TECHNOLOGY_PRODUCTS")]
        EXPANDED_OFFICE_SUPPLIES_AND_TECHNOLOGY_PRODUCTS = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO_CONFERENCING")]
        VIDEO_CONFERENCING = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SATURDAY_EXPRESS_HOLD_AT_LOCATION")]
        SATURDAY_EXPRESS_HOLD_AT_LOCATION = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"KIOSK_LOCATION")]
        KIOSK_LOCATION = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"STAFFED_LOCATION")]
        STAFFED_LOCATION = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"SAME_DAY_DROPOFFS")]
        SAME_DAY_DROPOFFS = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"SAME_DAY_CITY_DROPOFFS")]
        SAME_DAY_CITY_DROPOFFS = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"DROP_BOX")]
        DROP_BOX = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_SHIPPING_SERVICES")]
        DOMESTIC_SHIPPING_SERVICES = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNATIONAL_SHIPPING_SERVICES")]
        INTERNATIONAL_SHIPPING_SERVICES = 32,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocationDetailLocationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_AUTHORIZED_SHIP_CENTER")]
        FEDEX_AUTHORIZED_SHIP_CENTER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_OFFICE")]
        FEDEX_OFFICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_SELF_SERVICE_LOCATION")]
        FEDEX_SELF_SERVICE_LOCATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_STAFFED")]
        FEDEX_STAFFED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RETAIL_ALLICANCE_LOCATION")]
        RETAIL_ALLICANCE_LOCATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_GROUND_TERMINAL")]
        FEDEX_GROUND_TERMINAL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_ONSITE")]
        FEDEX_ONSITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_SHIP_AND_GET")]
        FEDEX_SHIP_AND_GET = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocationHoursDayofweek
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUNDAY")]
        SUNDAY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MONDAY")]
        MONDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TUESDAY")]
        TUESDAY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WEDNESDAY")]
        WEDNESDAY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THURSDAY")]
        THURSDAY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRIDAY")]
        FRIDAY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SATURDAY")]
        SATURDAY = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocationHoursExceptionalHoursType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED_ALL_DAY")]
        CLOSED_ALL_DAY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OPEN_ALL_DAY")]
        OPEN_ALL_DAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OPEN_BY_HOURS")]
        OPEN_BY_HOURS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocationHoursOperationalHoursType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED_ALL_DAY")]
        CLOSED_ALL_DAY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OPEN_ALL_DAY")]
        OPEN_ALL_DAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OPEN_BY_HOURS")]
        OPEN_BY_HOURS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CarrierDetailsCountryRelationshipType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC")]
        DOMESTIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNATIONAL")]
        INTERNATIONAL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CarrierDetailsCarrierCodeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FDXE")]
        FDXE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FDXG")]
        FDXG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FXSP")]
        FXSP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FXFR")]
        FXFR = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LatestDropoffDetailsDayOfWeek
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUNDAY")]
        SUNDAY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MONDAY")]
        MONDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TUESDAY")]
        TUESDAY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WEDNESDAY")]
        WEDNESDAY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THURSDAY")]
        THURSDAY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRIDAY")]
        FRIDAY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SATURDAY")]
        SATURDAY = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverlayType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_CANADIAN")]
        DOMESTIC_CANADIAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EAST_COAST")]
        EAST_COAST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_GROUND")]
        FEDEX_GROUND = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WEST_COAST")]
        WEST_COAST = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransitDaysMinimumTransitTime
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EIGHT_DAYS")]
        EIGHT_DAYS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EIGHTEEN_DAYS")]
        EIGHTEEN_DAYS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ELEVEN_DAYS")]
        ELEVEN_DAYS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FIFTEEN_DAYS")]
        FIFTEEN_DAYS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FIVE_DAYS")]
        FIVE_DAYS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUR_DAYS")]
        FOUR_DAYS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FOURTEEN_DAYS")]
        FOURTEEN_DAYS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NINE_DAYS")]
        NINE_DAYS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NINETEEN_DAYS")]
        NINETEEN_DAYS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ONE_DAY SEVEN_DAYS")]
        ONE_DAY_SEVEN_DAYS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SEVENTEEN_DAYS")]
        SEVENTEEN_DAYS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SIX_DAYS")]
        SIX_DAYS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"SIXTEEN_DAYS")]
        SIXTEEN_DAYS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"TEN_DAYS")]
        TEN_DAYS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRTEEN_DAYS")]
        THIRTEEN_DAYS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"THREE_DAYS")]
        THREE_DAYS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"TWELVE_DAYS")]
        TWELVE_DAYS = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TWENTY_DAYS")]
        TWENTY_DAYS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"TWO_DAYS")]
        TWO_DAYS = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FullSchemaFreightShipmentLabelResponseOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"URL_ONLY")]
        URL_ONLY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LABEL")]
        LABEL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxpayerIdentificationTinType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_NATIONAL")]
        PERSONAL_NATIONAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_STATE")]
        PERSONAL_STATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDERAL")]
        FEDERAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_NATIONAL")]
        BUSINESS_NATIONAL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_STATE")]
        BUSINESS_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_UNION")]
        BUSINESS_UNION = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightPaymentPaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER")]
        SENDER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_PARTY")]
        THIRD_PARTY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomDeliveryWindowDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ON")]
        ON = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BEFORE")]
        BEFORE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AFTER")]
        AFTER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BETWEEN")]
        BETWEEN = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightDirectDataDetailsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BASIC")]
        BASIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BASIC_BY_APPOINTMENT")]
        BASIC_BY_APPOINTMENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PREMIUM")]
        PREMIUM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightDirectDataDetailsTransportationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERY")]
        DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKUP")]
        PICKUP = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightPhoneNumberDetailPhoneNumberType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAX")]
        FAX = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME")]
        HOME = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MOBILE")]
        MOBILE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PAGER")]
        PAGER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TOLL_FREE")]
        TOLL_FREE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WORK")]
        WORK = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightDirectDataDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BASIC")]
        BASIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BASIC_BY_APPOINTMENT")]
        BASIC_BY_APPOINTMENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PREMIUM")]
        PREMIUM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightDirectDataDetailTransportationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERY")]
        DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKUP")]
        PICKUP = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EMailNotificationDetailAggregationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PER_PACKAGE")]
        PER_PACKAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PER_SHIPMENT")]
        PER_SHIPMENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailNotificationRecipientType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BROKER")]
        BROKER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_PARTY")]
        THIRD_PARTY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER1")]
        OTHER1 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER2")]
        OTHER2 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailNotificationRecipientNotificationFormatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HTML")]
        HTML = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailNotificationRecipientNotificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NotificationEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ON_DELIVERY")]
        ON_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_EXCEPTION")]
        ON_EXCEPTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_SHIPMENT")]
        ON_SHIPMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_TENDER")]
        ON_TENDER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_ESTIMATED_DELIVERY")]
        ON_ESTIMATED_DELIVERY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP")]
        ON_PICKUP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_LABEL")]
        ON_LABEL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_BILL_OF_LADING")]
        ON_BILL_OF_LADING = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_ARRIVED")]
        ON_PICKUP_DRIVER_ARRIVED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_ASSIGNED")]
        ON_PICKUP_DRIVER_ASSIGNED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_DEPARTED")]
        ON_PICKUP_DRIVER_DEPARTED = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_EN_ROUTE")]
        ON_PICKUP_DRIVER_EN_ROUTE = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Freight2020ShipmentDetailRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONSIGNEE")]
        CONSIGNEE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Freight2020ShipmentDetailCollectTermsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NON_RECOURSE_SHIPPER_SIGNED")]
        NON_RECOURSE_SHIPPER_SIGNED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightSpecialServicePaymentPaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONSIGNEE")]
        CONSIGNEE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COLLECT_SECTION_7_SIGNED")]
        COLLECT_SECTION_7_SIGNED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COLLECT")]
        COLLECT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PREPAID")]
        PREPAID = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COLLECT_SECTION_9_SIGNED")]
        COLLECT_SECTION_9_SIGNED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LiabilityCoverageDetailCoverageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USED_OR_RECONDITIONED")]
        USED_OR_RECONDITIONED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrintedReferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BILL_OF_LADING")]
        BILL_OF_LADING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONSIGNEE_ID_NUMBER")]
        CONSIGNEE_ID_NUMBER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERLINE_PRO_NUMBER")]
        INTERLINE_PRO_NUMBER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PO_NUMBER")]
        PO_NUMBER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER_ID_NUMBER")]
        SHIPPER_ID_NUMBER = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER_ID1_NUMBER")]
        SHIPPER_ID1_NUMBER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER_ID2_NUMBER")]
        SHIPPER_ID2_NUMBER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LineItemsDimensionsUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VariableHandlingChargeDetailRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL")]
        ACTUAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT")]
        CURRENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INCENTIVE")]
        INCENTIVE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED")]
        PREFERRED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_INCENTIVE")]
        PREFERRED_INCENTIVE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_CURRENCY")]
        PREFERRED_CURRENCY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VariableHandlingChargeDetailRateLevelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLED_RATE")]
        BUNDLED_RATE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDIVIDUAL_PACKAGE_RATE")]
        INDIVIDUAL_PACKAGE_RATE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VariableHandlingChargeDetailRateElementBasis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NET_CHARGE")]
        NET_CHARGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_FREIGHT")]
        NET_FREIGHT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BASE_CHARGE")]
        BASE_CHARGE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_CHARGE_EXCLUDING_TAXES")]
        NET_CHARGE_EXCLUDING_TAXES = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegulatoryControls
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FOOD_OR_PERISHABLE")]
        FOOD_OR_PERISHABLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA")]
        USMCA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_APPLICABLE_FOR_LOW_VALUE_CUSTOMS_EXCEPTIONS")]
        NOT_APPLICABLE_FOR_LOW_VALUE_CUSTOMS_EXCEPTIONS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IN_FREE_CIRCULATION")]
        NOT_IN_FREE_CIRCULATION = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomsClearanceDetailFreightOnValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CARRIER_RISK")]
        CARRIER_RISK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OWN_RISK")]
        OWN_RISK = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommercialInvoiceTaxesOrMiscellaneousChargeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSIONS")]
        COMMISSIONS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DISCOUNTS")]
        DISCOUNTS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HANDLING_FEES")]
        HANDLING_FEES = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ROYALTIES_AND_LICENSE_FEES")]
        ROYALTIES_AND_LICENSE_FEES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TAXES")]
        TAXES = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommercialInvoiceShipmentPurpose
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT")]
        GIFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_SOLD")]
        NOT_SOLD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_EFFECTS")]
        PERSONAL_EFFECTS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REPAIR_AND_RETURN")]
        REPAIR_AND_RETURN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SAMPLE")]
        SAMPLE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SOLD")]
        SOLD = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerReferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INVOICE_NUMBER")]
        INVOICE_NUMBER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"P_O_NUMBER")]
        P_O_NUMBER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommodityPurpose
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONSUMER")]
        CONSUMER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaDetailOriginCriterion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A")]
        A = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RecipientCustomsIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDIVIDUAL")]
        INDIVIDUAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomsOptionDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COURTESY_RETURN_LABEL")]
        COURTESY_RETURN_LABEL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EXHIBITION_TRADE_SHOW")]
        EXHIBITION_TRADE_SHOW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FAULTY_ITEM")]
        FAULTY_ITEM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FOLLOWING_REPAIR")]
        FOLLOWING_REPAIR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FOR_REPAIR")]
        FOR_REPAIR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ITEM_FOR_LOAN")]
        ITEM_FOR_LOAN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"REPLACEMENT")]
        REPLACEMENT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIAL")]
        TRIAL = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExportDetailB13AFilingOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_REQUIRED")]
        NOT_REQUIRED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MANUALLY_ATTACHED")]
        MANUALLY_ATTACHED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FILED_ELECTRONICALLY")]
        FILED_ELECTRONICALLY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUMMARY_REPORTING")]
        SUMMARY_REPORTING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_TO_STAMP")]
        FEDEX_TO_STAMP = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DestinationControlDetailStatementTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEPARTMENT_OF_COMMERCE")]
        DEPARTMENT_OF_COMMERCE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPARTMENT_OF_STATE")]
        DEPARTMENT_OF_STATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPARTMENT_OF_COMMERCE_AND_DEPARTMENT_OF_STATE")]
        DEPARTMENT_OF_COMMERCE_AND_DEPARTMENT_OF_STATE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaLowValueStatementDetailCustomsRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORTER")]
        EXPORTER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORTER")]
        IMPORTER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationLabelFormatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COMMON2D")]
        COMMON2D = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LABEL_DATA_ONLY")]
        LABEL_DATA_ONLY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationLabelOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPING_LABEL_FIRST")]
        SHIPPING_LABEL_FIRST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPING_LABEL_LAST")]
        SHIPPING_LABEL_LAST = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationLabelStockType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_4X6")]
        PAPER_4X6 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_4X675")]
        PAPER_4X675 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_4X8")]
        PAPER_4X8 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_4X9")]
        PAPER_4X9 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_7X475")]
        PAPER_7X475 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_85X11_BOTTOM_HALF_LABEL")]
        PAPER_85X11_BOTTOM_HALF_LABEL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_85X11_TOP_HALF_LABEL")]
        PAPER_85X11_TOP_HALF_LABEL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_LETTER")]
        PAPER_LETTER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X675_LEADING_DOC_TAB")]
        STOCK_4X675_LEADING_DOC_TAB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X8")]
        STOCK_4X8 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X9_LEADING_DOC_TAB")]
        STOCK_4X9_LEADING_DOC_TAB = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X6")]
        STOCK_4X6 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X675_TRAILING_DOC_TAB")]
        STOCK_4X675_TRAILING_DOC_TAB = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X9_TRAILING_DOC_TAB")]
        STOCK_4X9_TRAILING_DOC_TAB = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X675")]
        STOCK_4X675 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X9")]
        STOCK_4X9 = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationLabelRotation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT")]
        LEFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RIGHT")]
        RIGHT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UPSIDE_DOWN")]
        UPSIDE_DOWN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationImageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ZPLII")]
        ZPLII = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EPL2")]
        EPL2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PNG")]
        PNG = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationLabelPrintingOrientation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BOTTOM_EDGE_OF_TEXT_FIRST")]
        BOTTOM_EDGE_OF_TEXT_FIRST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP_EDGE_OF_TEXT_FIRST")]
        TOP_EDGE_OF_TEXT_FIRST = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MaskedData
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMS_VALUE")]
        CUSTOMS_VALUE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DIMENSIONS")]
        DIMENSIONS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER")]
        DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INSURED_VALUE")]
        INSURED_VALUE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SECONDARY_BARCODE")]
        SECONDARY_BARCODE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER_INFORMATION")]
        SHIPPER_INFORMATION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TERMS_AND_CONDITIONS")]
        TERMS_AND_CONDITIONS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_WEIGHT")]
        TOTAL_WEIGHT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER")]
        TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegulatoryLabelContentDetailGenerationOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_ON_SHIPPING_LABEL_PREFERRED")]
        CONTENT_ON_SHIPPING_LABEL_PREFERRED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY")]
        CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_ON_SHIPPING_LABEL_ONLY")]
        CONTENT_ON_SHIPPING_LABEL_ONLY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegulatoryLabelContentDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALCOHOL_SHIPMENT_LABEL")]
        ALCOHOL_SHIPMENT_LABEL = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalLabelsDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BROKER")]
        BROKER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONSIGNEE")]
        CONSIGNEE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMS")]
        CUSTOMS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DESTINATION")]
        DESTINATION = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DESTINATION_CONTROL_STATEMENT")]
        DESTINATION_CONTROL_STATEMENT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FREIGHT_REFERENCE")]
        FREIGHT_REFERENCE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MANIFEST")]
        MANIFEST = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORIGIN")]
        ORIGIN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SECOND_ADDRESS")]
        SECOND_ADDRESS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocTabContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BARCODED")]
        BARCODED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MINIMUM")]
        MINIMUM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ZONE001")]
        ZONE001 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocTabZoneSpecificationJustification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT")]
        LEFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RIGHT")]
        RIGHT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocTabContentBarcodedSymbology
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CODABAR")]
        CODABAR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE128")]
        CODE128 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE128_WIDEBAR")]
        CODE128_WIDEBAR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE128B")]
        CODE128B = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE128C")]
        CODE128C = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE39")]
        CODE39 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE93")]
        CODE93 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"I2OF5")]
        I2OF5 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PDF417")]
        PDF417 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"POSTNET")]
        POSTNET = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"QR_CODE")]
        QR_CODE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"UCC128")]
        UCC128 = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_ORIGIN")]
        CERTIFICATE_OF_ORIGIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_INVOICE")]
        COMMERCIAL_INVOICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_PACKAGE_DOCUMENT")]
        CUSTOM_PACKAGE_DOCUMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_SHIPMENT_DOCUMENT")]
        CUSTOM_SHIPMENT_DOCUMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_SPECIFIED_LABELS")]
        CUSTOMER_SPECIFIED_LABELS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORT_DECLARATION")]
        EXPORT_DECLARATION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DANGEROUS_GOODS_SHIPPERS_DECLARATION")]
        DANGEROUS_GOODS_SHIPPERS_DECLARATION = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FREIGHT_ADDRESS_LABEL")]
        FREIGHT_ADDRESS_LABEL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_AGENCY_AGREEMENT")]
        GENERAL_AGENCY_AGREEMENT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"LABEL")]
        LABEL = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN")]
        USMCA_CERTIFICATION_OF_ORIGIN = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"OP_900")]
        OP_900 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_SHIPMENT_EMAIL_NOTIFICATION")]
        PENDING_SHIPMENT_EMAIL_NOTIFICATION = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PRO_FORMA_INVOICE")]
        PRO_FORMA_INVOICE = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_INSTRUCTIONS")]
        RETURN_INSTRUCTIONS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING")]
        FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"VICS_BILL_OF_LADING")]
        VICS_BILL_OF_LADING = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN")]
        USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentFormatStockType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_LETTER")]
        PAPER_LETTER = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentFormatDocType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPING_LABEL_FIRST")]
        SHIPPING_LABEL_FIRST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPING_LABEL_LAST")]
        SHIPPING_LABEL_LAST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPRESS_ADDITIONAL_LANGUAGES")]
        SUPPRESS_ADDITIONAL_LANGUAGES = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentDispositionDetailDispositionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
        CONFIRMED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFERRED_QUEUED")]
        DEFERRED_QUEUED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFERRED_RETURNED")]
        DEFERRED_RETURNED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFERRED_STORED")]
        DEFERRED_STORED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAILED")]
        EMAILED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"QUEUED")]
        QUEUED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNED")]
        RETURNED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED")]
        STORED = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentEmailDetailGrouping
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BY_RECIPIENT")]
        BY_RECIPIENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentEmailRecipientRecipientType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BROKER")]
        BROKER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_PARTY")]
        THIRD_PARTY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER1")]
        OTHER1 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER2")]
        OTHER2 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerImageUsageId
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_1")]
        IMAGE_1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_2")]
        IMAGE_2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_3")]
        IMAGE_3 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_4")]
        IMAGE_4 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_5")]
        IMAGE_5 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerImageUsageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SIGNATURE")]
        SIGNATURE = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerImageUsageProvidedImageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LETTER_HEAD")]
        LETTER_HEAD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SIGNATURE")]
        SIGNATURE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCertificationOfOriginDetailCertifierSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORTER")]
        EXPORTER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORTER")]
        IMPORTER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCER")]
        PRODUCER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCertificationOfOriginDetailImporterSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VARIOUS")]
        VARIOUS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCertificationOfOriginDetailProducerSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_UPON_REQUEST")]
        AVAILABLE_UPON_REQUEST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VARIOUS")]
        VARIOUS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SAME_AS_EXPORTER")]
        SAME_AS_EXPORTER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCommercialInvoiceCertificationOfOriginDetailCertifierSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORTER")]
        EXPORTER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORTER")]
        IMPORTER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCER")]
        PRODUCER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCommercialInvoiceCertificationOfOriginDetailImporterSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VARIOUS")]
        VARIOUS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCommercialInvoiceCertificationOfOriginDetailProducerSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_UPON_REQUEST")]
        AVAILABLE_UPON_REQUEST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VARIOUS")]
        VARIOUS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SAME_AS_EXPORTER")]
        SAME_AS_EXPORTER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightAddressLabelDetailStartingPosition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BOTTOM_LEFT")]
        BOTTOM_LEFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BOTTOM_RIGHT")]
        BOTTOM_RIGHT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP_LEFT")]
        TOP_LEFT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP_RIGHT")]
        TOP_RIGHT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelResponseVOContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LABEL")]
        LABEL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BILL_OF_LADING")]
        BILL_OF_LADING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GAA_FORM")]
        GAA_FORM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HAZMAT_LABEL")]
        HAZMAT_LABEL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"END_OF_DAY_HAZMAT_REPORT")]
        END_OF_DAY_HAZMAT_REPORT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MANIFEST_REPORT")]
        MANIFEST_REPORT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTIWEIGHT_REPORT")]
        MULTIWEIGHT_REPORT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MERGED_LABEL_DOCUMENTS")]
        MERGED_LABEL_DOCUMENTS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AUXILIARY")]
        AUXILIARY = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_INSTRUCTIONS")]
        RETURN_INSTRUCTIONS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTANCE_LABEL")]
        ACCEPTANCE_LABEL = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_INVOICE")]
        COMMERCIAL_INVOICE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PROFORMA_INVOICE")]
        PROFORMA_INVOICE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN")]
        USMCA_CERTIFICATION_OF_ORIGIN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_ORIGIN")]
        CERTIFICATE_OF_ORIGIN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MERGED_LABELS_ONLY")]
        MERGED_LABELS_ONLY = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PieceResponseServiceCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPRESS")]
        EXPRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND")]
        GROUND = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPRESS_FREIGHT")]
        EXPRESS_FREIGHT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FREIGHT")]
        FREIGHT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPRESS_PARCEL")]
        EXPRESS_PARCEL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NULL")]
        NULL = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UploadDocumentReferenceDetailDocumentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_ORIGIN")]
        CERTIFICATE_OF_ORIGIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_INVOICE")]
        COMMERCIAL_INVOICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ETD_LABEL")]
        ETD_LABEL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN")]
        USMCA_CERTIFICATION_OF_ORIGIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PRO_FORMA_INVOICE")]
        PRO_FORMA_INVOICE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN")]
        USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Address_AvailabilityAddressClassification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MIXED")]
        MIXED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RESIDENTIAL")]
        RESIDENTIAL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Weight_AvailabilityUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Dimensions_AvailabilityUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightPickupAvailabilityOutputVOCloseTimeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_SPECIFIED")]
        CUSTOMER_SPECIFIED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightPickupScheduleOptionCarrier
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FXFR")]
        FXFR = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightPickupScheduleOptionScheduleDay
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SAME_DAY")]
        SAME_DAY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_DAY")]
        FUTURE_DAY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FullSchemaCreatePickupCountryRelationships
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC")]
        DOMESTIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNATIONAL")]
        INTERNATIONAL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PhoneNumberDetailsPhoneNumberType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAX")]
        FAX = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME")]
        HOME = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MOBILE")]
        MOBILE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PAGER")]
        PAGER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TOLL_FREE")]
        TOLL_FREE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WORK")]
        WORK = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PickupOriginDetail_LTLPickupAddressType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PickupOriginDetail_LTLPickupDateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SAME_DAY")]
        SAME_DAY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FUTURE_DAY")]
        FUTURE_DAY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PickupOriginDetail_LTLBuildingPart
    {

        [System.Runtime.Serialization.EnumMember(Value = @"APARTMENT")]
        APARTMENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BUILDING")]
        BUILDING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPARTMENT")]
        DEPARTMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOOR")]
        FLOOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ROOM")]
        ROOM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SUITE")]
        SUITE = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Address_LTLAddressClassification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MIXED")]
        MIXED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RESIDENTIAL")]
        RESIDENTIAL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LineItemsPackaging
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BAG")]
        BAG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BARREL")]
        BARREL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BASKET")]
        BASKET = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BOX")]
        BOX = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BUCKET")]
        BUCKET = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CAGE")]
        CAGE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CARTON")]
        CARTON = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE")]
        CASE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEST")]
        CHEST = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINER")]
        CONTAINER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CRATE")]
        CRATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CYLINDER")]
        CYLINDER = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"DRUM")]
        DRUM = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ENVELOPE")]
        ENVELOPE = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"HAMPER")]
        HAMPER = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGE")]
        PACKAGE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAIL")]
        PAIL = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PALLET")]
        PALLET = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PARCEL")]
        PARCEL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PIECE")]
        PIECE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"REEL")]
        REEL = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ROLL")]
        ROLL = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SACK")]
        SACK = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SHRINK_WRAPPED")]
        SHRINK_WRAPPED = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"SKID")]
        SKID = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"TANK")]
        TANK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTE_BIN")]
        TOTE_BIN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"TUBE")]
        TUBE = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 30,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PickupNotificationDetailFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HTML")]
        HTML = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WeightUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DimensionsUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightShipmentLineItemSubPackagingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BAG")]
        BAG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BARREL")]
        BARREL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BASKET")]
        BASKET = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BOX")]
        BOX = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BUCKET")]
        BUCKET = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CAGE")]
        CAGE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CARTON")]
        CARTON = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE")]
        CASE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEST")]
        CHEST = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINER")]
        CONTAINER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CRATE")]
        CRATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CYLINDER")]
        CYLINDER = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"DRUM")]
        DRUM = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ENVELOPE")]
        ENVELOPE = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGE")]
        PACKAGE = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAIL")]
        PAIL = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PALLET")]
        PALLET = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PARCEL")]
        PARCEL = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PIECES")]
        PIECES = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"REEL")]
        REEL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ROLL")]
        ROLL = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"SACK")]
        SACK = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"SHRINKWRAPPED")]
        SHRINKWRAPPED = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SKID")]
        SKID = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"TANK")]
        TANK = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTEBIN")]
        TOTEBIN = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"TUBE")]
        TUBE = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightShipmentLineItemFreightClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_050")]
        CLASS_050 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_055")]
        CLASS_055 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_060")]
        CLASS_060 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_065")]
        CLASS_065 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_070")]
        CLASS_070 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_077_5")]
        CLASS_077_5 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_085")]
        CLASS_085 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_092_5")]
        CLASS_092_5 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_100")]
        CLASS_100 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_110")]
        CLASS_110 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_125")]
        CLASS_125 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_150")]
        CLASS_150 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_175")]
        CLASS_175 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_200")]
        CLASS_200 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_250")]
        CLASS_250 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_300")]
        CLASS_300 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_400")]
        CLASS_400 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_500")]
        CLASS_500 = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightShipmentLineItemHazardousMaterials
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HAZARDOUS_MATERIALS")]
        HAZARDOUS_MATERIALS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTERY")]
        BATTERY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ORM_D")]
        ORM_D = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REPORTABLE_QUANTITIES")]
        REPORTABLE_QUANTITIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SMALL_QUANTITY_EXCEPTION")]
        SMALL_QUANTITY_EXCEPTION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LIMITED_QUANTITIES_COMMODITIES")]
        LIMITED_QUANTITIES_COMMODITIES = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightShipmentLineItem_2SubPackagingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CARTON")]
        CARTON = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CRATE")]
        CRATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DRUM")]
        DRUM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PAIL")]
        PAIL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PALLET")]
        PALLET = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SKID")]
        SKID = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightShipmentLineItem_2FreightClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_050")]
        CLASS_050 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_055")]
        CLASS_055 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_060")]
        CLASS_060 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_065")]
        CLASS_065 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_070")]
        CLASS_070 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_077_5")]
        CLASS_077_5 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_085")]
        CLASS_085 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_092_5")]
        CLASS_092_5 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_100")]
        CLASS_100 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_110")]
        CLASS_110 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_125")]
        CLASS_125 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_150")]
        CLASS_150 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_175")]
        CLASS_175 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_200")]
        CLASS_200 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_250")]
        CLASS_250 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_300")]
        CLASS_300 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_400")]
        CLASS_400 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"CLASS_500")]
        CLASS_500 = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightShipmentLineItem_2HazardousMaterials
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HAZARDOUS_MATERIALS")]
        HAZARDOUS_MATERIALS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTERY")]
        BATTERY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ORM_D")]
        ORM_D = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REPORTABLE_QUANTITIES")]
        REPORTABLE_QUANTITIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SMALL_QUANTITY_EXCEPTION")]
        SMALL_QUANTITY_EXCEPTION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LIMITED_QUANTITIES_COMMODITIES")]
        LIMITED_QUANTITIES_COMMODITIES = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VolumeUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUBIC_FT")]
        CUBIC_FT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUBIC_M")]
        CUBIC_M = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightGuaranteeDetailFreightGuaranteeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GUARANTEED_DATE")]
        GUARANTEED_DATE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GUARANTEED_MORNING")]
        GUARANTEED_MORNING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BrokerDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORT")]
        EXPORT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BrokerDetail_2Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommitDetailDaysInTransit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EIGHT_DAYS")]
        EIGHT_DAYS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EIGHTEEN_DAYS")]
        EIGHTEEN_DAYS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ELEVEN_DAYS")]
        ELEVEN_DAYS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FIFTEEN_DAYS")]
        FIFTEEN_DAYS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FIVE_DAYS")]
        FIVE_DAYS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUR_DAYS")]
        FOUR_DAYS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FOURTEEN_DAYS")]
        FOURTEEN_DAYS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NINE_DAYS")]
        NINE_DAYS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NINETEEN_DAYS")]
        NINETEEN_DAYS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ONE_DAY")]
        ONE_DAY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SEVEN_DAYS")]
        SEVEN_DAYS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEVENTEEN_DAYS")]
        SEVENTEEN_DAYS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"SIX_DAYS")]
        SIX_DAYS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SIXTEEN_DAYS")]
        SIXTEEN_DAYS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"TEN_DAYS")]
        TEN_DAYS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRTEEN_DAYS")]
        THIRTEEN_DAYS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"THREE_DAYS")]
        THREE_DAYS = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TWELVE_DAYS")]
        TWELVE_DAYS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"TWENTY_DAYS")]
        TWENTY_DAYS = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TWO_DAYS")]
        TWO_DAYS = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommitDetailGuaranteedType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GUARANTEED_MORNING")]
        GUARANTEED_MORNING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GUARANTEED_CLOSE_OF_BUSINESS")]
        GUARANTEED_CLOSE_OF_BUSINESS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOTE")]
        NOTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreightRequestedShipment_FreightPickupType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_FEDEX TO_SCHEDULE")]
        CONTACT_FEDEX_TO_SCHEDULE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DROPOFF_AT_FEDEX_LOCATION")]
        DROPOFF_AT_FEDEX_LOCATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"USE_SCHEDULED_PICKUP")]
        USE_SCHEDULED_PICKUP = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum rateRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED")]
        PREFERRED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INCENTIVE")]
        INCENTIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RETAIL")]
        RETAIL = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER")]
        SENDER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_PARTY")]
        THIRD_PARTY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COLLECT")]
        COLLECT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HazardousCommodityQuantityDetailQuantityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GROSS")]
        GROSS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NET")]
        NET = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HazardousCommodityOptionDetailLabelTextOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"APPEND")]
        APPEND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERRIDE")]
        OVERRIDE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProcessingOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INCLUDE_SPECIAL_PROVISIONS")]
        INCLUDE_SPECIAL_PROVISIONS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HazardousCommodityDescriptionPackingGroup
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"II")]
        II = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"III")]
        III = 3,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625